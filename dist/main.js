// UMD Module
(function (root, factory) {
  if (typeof module === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register a named module.
    define('asciidoctor/docbook', ['asciidoctor'], function () {
      return factory();
    });
  } else {
    // Browser globals (root is window)
    factory();
  }
}(this, function () {
/* Generated by Opal 0.11.0.dev */
Opal.modules["asciidoctor/converter/docbook5"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$doctype', '$<<', '$doctype_declaration', '$attr?', '$attr', '$lang_attribute_name', '$document_ns_attributes', '$document_info_element', '$blocks?', '$content', '$empty?', '$docinfo', '$*', '$document', '$special', '$start_with?', '$sectname', '$<=', '$level', '$common_attributes', '$id', '$role', '$reftext', '$title', '$title_tag', '$resolve_content', '$title?', '$each', '$items', '$text', '$default=', '$-', '$style', '$nil?', '$text?', '$[]', '$image_uri', '$!', '$index', '$subs', '$delete', '$insert', '$require_library', '$to_mathml', '$parse', '$===', '$parent', '$warn', '$context', '$option?', '$include?', '$columns', '$select', '$rows', '$colspan', '$column', '$+', '$rowspan', '$join', '$map', '$type', '$target', '$attributes', '$inspect', '$icon_uri', '$>', '$size', '$chop', '$notitle', '$document_title_tags', '$doctitle', '$has_header?', '$<', '$to_i', '$author_element', '$times', '$subtitle?', '$main', '$subtitle', '$content_model']);
  return (function($base, $visibility_scopes) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope);

    (function($base, $super, $visibility_scopes) {
      function $DocBook5Converter(){};
      var self = $DocBook5Converter = $klass($base, $super, 'DocBook5Converter', $DocBook5Converter);

      var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_DocBook5Converter_document_1, TMP_DocBook5Converter_section_2, TMP_DocBook5Converter_admonition_3, TMP_DocBook5Converter_colist_5, TMP_DocBook5Converter_dlist_10, TMP_DocBook5Converter_example_11, TMP_DocBook5Converter_floating_title_12, TMP_DocBook5Converter_image_13, TMP_DocBook5Converter_listing_14, TMP_DocBook5Converter_literal_15, TMP_DocBook5Converter_stem_16, TMP_DocBook5Converter_olist_18, TMP_DocBook5Converter_open_19, TMP_DocBook5Converter_page_break_20, TMP_DocBook5Converter_paragraph_21, TMP_DocBook5Converter_preamble_22, TMP_DocBook5Converter_quote_23, TMP_DocBook5Converter_thematic_break_24, TMP_DocBook5Converter_sidebar_25, TMP_DocBook5Converter_table_34, TMP_DocBook5Converter_ulist_37, TMP_DocBook5Converter_verse_38, TMP_DocBook5Converter_inline_anchor_39, TMP_DocBook5Converter_inline_break_40, TMP_DocBook5Converter_inline_button_41, TMP_DocBook5Converter_inline_callout_42, TMP_DocBook5Converter_inline_footnote_43, TMP_DocBook5Converter_inline_image_44, TMP_DocBook5Converter_inline_indexterm_45, TMP_DocBook5Converter_inline_kbd_47, TMP_DocBook5Converter_inline_menu_49, TMP_DocBook5Converter_inline_quoted_50, TMP_DocBook5Converter_author_element_51, TMP_DocBook5Converter_common_attributes_52, TMP_DocBook5Converter_doctype_declaration_53, TMP_DocBook5Converter_document_info_element_55, TMP_DocBook5Converter_document_ns_attributes_56, TMP_DocBook5Converter_lang_attribute_name_57, TMP_DocBook5Converter_document_title_tags_58, TMP_DocBook5Converter_resolve_content_59, TMP_DocBook5Converter_title_tag_60, $writer = nil;

      def.asciimath_available = nil;
      
      Opal.defn(self, '$document', TMP_DocBook5Converter_document_1 = function $$document(node) {
        var $a, self = this, result = nil, root_tag_name = nil, doctype_line = nil, lang_attribute = nil, footer_docinfo = nil;

        
        result = [];
        if ((root_tag_name = node.$doctype())['$==']("manpage")) {
          root_tag_name = "refentry"};
        result['$<<']("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        if ((($a = (doctype_line = self.$doctype_declaration(root_tag_name))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](doctype_line)};
        if ((($a = node['$attr?']("toc")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("toclevels")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<?asciidoc-toc maxdepth=\"" + (node.$attr("toclevels")) + "\"?>")
            } else {
            result['$<<']("<?asciidoc-toc?>")
          }};
        if ((($a = node['$attr?']("sectnums")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("sectnumlevels")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<?asciidoc-numbered maxdepth=\"" + (node.$attr("sectnumlevels")) + "\"?>")
            } else {
            result['$<<']("<?asciidoc-numbered?>")
          }};
        lang_attribute = (function() {if ((($a = node['$attr?']("nolang")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return "" + " " + (self.$lang_attribute_name()) + "=\"" + (node.$attr("lang", "en")) + "\""
        }; return nil; })();
        result['$<<']("" + "<" + (root_tag_name) + (self.$document_ns_attributes(node)) + (lang_attribute) + ">");
        result['$<<'](self.$document_info_element(node, root_tag_name));
        if ((($a = node['$blocks?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](node.$content())};
        if ((($a = (footer_docinfo = node.$docinfo("footer"))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](footer_docinfo)
        };
        result['$<<']("" + "</" + (root_tag_name) + ">");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_document_1.$$arity = 1);
      Opal.alias(self, "embedded", "content");
      Opal.defn(self, '$section', TMP_DocBook5Converter_section_2 = function $$section(node) {
        var $a, $b, self = this, doctype = nil, tag_name = nil;

        
        doctype = node.$document().$doctype();
        if ((($a = node.$special()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (tag_name = node.$sectname())['$start_with?']("sect")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            tag_name = "section"}
          } else {
          tag_name = (function() {if ((($a = (($b = doctype['$==']("book")) ? $rb_le(node.$level(), 1) : doctype['$==']("book"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            
            if (node.$level()['$=='](0)) {
              return "part"
              } else {
              return "chapter"
            };
            } else {
            return "section"
          }; return nil; })()
        };
        if (doctype['$==']("manpage")) {
          if (tag_name['$==']("section")) {
            tag_name = "refsection"
          } else if (tag_name['$==']("synopsis")) {
            tag_name = "refsynopsisdiv"}};
        return "" + "<" + (tag_name) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (node.$content()) + "\n" + "</" + (tag_name) + ">";
      }, TMP_DocBook5Converter_section_2.$$arity = 1);
      Opal.defn(self, '$admonition', TMP_DocBook5Converter_admonition_3 = function $$admonition(node) {
        var self = this, tag_name = nil;

        return "" + "<" + ((tag_name = node.$attr("name"))) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n" + "</" + (tag_name) + ">"
      }, TMP_DocBook5Converter_admonition_3.$$arity = 1);
      Opal.alias(self, "audio", "skip");
      Opal.defn(self, '$colist', TMP_DocBook5Converter_colist_5 = function $$colist(node) {
        var $a, TMP_4, self = this, result = nil;

        
        result = [];
        result['$<<']("" + "<calloutlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        $send(node.$items(), 'each', [], (TMP_4 = function(item){var self = TMP_4.$$s || this, $b;
if (item == null) item = nil;
        
          result['$<<']("" + "<callout arearefs=\"" + (item.$attr("coids")) + "\">");
          result['$<<']("" + "<para>" + (item.$text()) + "</para>");
          if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</callout>");}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        result['$<<']("</calloutlist>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_colist_5.$$arity = 1);
      
      $writer = [$hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"})];
      $send(Opal.cdecl($scope, 'DLIST_TAGS', $hash2(["labeled", "qanda", "glossary"], {"labeled": $hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"}), "qanda": $hash2(["list", "entry", "label", "term", "item"], {"list": "qandaset", "entry": "qandaentry", "label": "question", "term": "simpara", "item": "answer"}), "glossary": $hash2(["list", "entry", "term", "item"], {"list": nil, "entry": "glossentry", "term": "glossterm", "item": "glossdef"})})), 'default=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defn(self, '$dlist', TMP_DocBook5Converter_dlist_10 = function $$dlist(node) {
        var $a, TMP_6, TMP_8, self = this, result = nil, tag_name = nil, tags = nil, list_tag = nil, entry_tag = nil, label_tag = nil, term_tag = nil, item_tag = nil;

        
        result = [];
        if (node.$style()['$==']("horizontal")) {
          
          result['$<<']("" + "<" + ((tag_name = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "table"
            } else {
            return "informaltable"
          }; return nil; })())) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " tabstyle=\"horizontal\" frame=\"none\" colsep=\"0\" rowsep=\"0\">\n" + (self.$title_tag(node)) + "<tgroup cols=\"2\">\n" + "<colspec colwidth=\"" + (node.$attr("labelwidth", 15)) + "*\"/>\n" + "<colspec colwidth=\"" + (node.$attr("itemwidth", 85)) + "*\"/>\n" + "<tbody valign=\"top\">");
          $send(node.$items(), 'each', [], (TMP_6 = function(terms, dd){var self = TMP_6.$$s || this, TMP_7, $b;
if (terms == null) terms = nil;if (dd == null) dd = nil;
          
            result['$<<']("" + "<row>\n" + "<entry>");
            $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_7 = function(dt){var self = TMP_7.$$s || this;
if (dt == null) dt = nil;
            return result['$<<']("" + "<simpara>" + (dt.$text()) + "</simpara>")}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
            result['$<<']("" + "</entry>\n" + "<entry>");
            if ((($b = dd['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              } else {
              
              if ((($b = dd['$text?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                result['$<<']("" + "<simpara>" + (dd.$text()) + "</simpara>")};
              if ((($b = dd['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                result['$<<'](dd.$content())};
            };
            return result['$<<']("" + "</entry>\n" + "</row>");}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6));
          result['$<<']("" + "</tbody>\n" + "</tgroup>\n" + "</" + (tag_name) + ">");
          } else {
          
          tags = Opal.const_get($scopes, 'DLIST_TAGS', true, true)['$[]'](node.$style());
          list_tag = tags['$[]']("list");
          entry_tag = tags['$[]']("entry");
          label_tag = tags['$[]']("label");
          term_tag = tags['$[]']("term");
          item_tag = tags['$[]']("item");
          if (list_tag !== false && list_tag !== nil && list_tag != null) {
            
            result['$<<']("" + "<" + (list_tag) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
            if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<title>" + (node.$title()) + "</title>")};};
          $send(node.$items(), 'each', [], (TMP_8 = function(terms, dd){var self = TMP_8.$$s || this, TMP_9, $b;
if (terms == null) terms = nil;if (dd == null) dd = nil;
          
            result['$<<']("" + "<" + (entry_tag) + ">");
            if (label_tag !== false && label_tag !== nil && label_tag != null) {
              result['$<<']("" + "<" + (label_tag) + ">")};
            $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_9 = function(dt){var self = TMP_9.$$s || this;
if (dt == null) dt = nil;
            return result['$<<']("" + "<" + (term_tag) + ">" + (dt.$text()) + "</" + (term_tag) + ">")}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
            if (label_tag !== false && label_tag !== nil && label_tag != null) {
              result['$<<']("" + "</" + (label_tag) + ">")};
            result['$<<']("" + "<" + (item_tag) + ">");
            if ((($b = dd['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              } else {
              
              if ((($b = dd['$text?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                result['$<<']("" + "<simpara>" + (dd.$text()) + "</simpara>")};
              if ((($b = dd['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                result['$<<'](dd.$content())};
            };
            result['$<<']("" + "</" + (item_tag) + ">");
            return result['$<<']("" + "</" + (entry_tag) + ">");}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8));
          if (list_tag !== false && list_tag !== nil && list_tag != null) {
            result['$<<']("" + "</" + (list_tag) + ">")};
        };
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_dlist_10.$$arity = 1);
      Opal.defn(self, '$example', TMP_DocBook5Converter_example_11 = function $$example(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<example" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (self.$resolve_content(node)) + "\n" + "</example>"
          } else {
          return "" + "<informalexample" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$resolve_content(node)) + "\n" + "</informalexample>"
        }
      }, TMP_DocBook5Converter_example_11.$$arity = 1);
      Opal.defn(self, '$floating_title', TMP_DocBook5Converter_floating_title_12 = function $$floating_title(node) {
        var self = this;

        return "" + "<bridgehead" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " renderas=\"sect" + (node.$level()) + "\">" + (node.$title()) + "</bridgehead>"
      }, TMP_DocBook5Converter_floating_title_12.$$arity = 1);
      Opal.defn(self, '$image', TMP_DocBook5Converter_image_13 = function $$image(node) {
        var $a, self = this, width_attribute = nil, depth_attribute = nil, swidth_attribute = nil, scale_attribute = nil, align_attribute = nil, mediaobject = nil;

        
        width_attribute = (function() {if ((($a = node['$attr?']("width")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " contentwidth=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((($a = node['$attr?']("height")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " contentdepth=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        swidth_attribute = (function() {if ((($a = node['$attr?']("scaledwidth")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " width=\"" + (node.$attr("scaledwidth")) + "\" scalefit=\"1\""
          } else {
          return nil
        }; return nil; })();
        scale_attribute = (function() {if ((($a = node['$attr?']("scale")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " scale=\"" + (node.$attr("scale")) + "\""
          } else {
          return nil
        }; return nil; })();
        align_attribute = (function() {if ((($a = node['$attr?']("align")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " align=\"" + (node.$attr("align")) + "\""
          } else {
          return nil
        }; return nil; })();
        mediaobject = "" + "<mediaobject>\n" + "<imageobject>\n" + "<imagedata fileref=\"" + (node.$image_uri(node.$attr("target"))) + "\"" + (width_attribute) + (depth_attribute) + (swidth_attribute) + (scale_attribute) + (align_attribute) + "/>\n" + "</imageobject>\n" + "<textobject><phrase>" + (node.$attr("alt")) + "</phrase></textobject>\n" + "</mediaobject>";
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<figure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (mediaobject) + "\n" + "</figure>"
          } else {
          return "" + "<informalfigure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (mediaobject) + "\n" + "</informalfigure>"
        };
      }, TMP_DocBook5Converter_image_13.$$arity = 1);
      Opal.defn(self, '$listing', TMP_DocBook5Converter_listing_14 = function $$listing(node) {
        var $a, $b, self = this, informal = nil, listing_attributes = nil, numbering = nil, listing_content = nil;

        
        informal = node['$title?']()['$!']();
        listing_attributes = self.$common_attributes(node.$id(), node.$role(), node.$reftext());
        if ((($a = (($b = node.$style()['$==']("source")) ? node['$attr?']("language") : node.$style()['$==']("source"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          numbering = (function() {if ((($a = node['$attr?']("linenums")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "numbered"
            } else {
            return "unnumbered"
          }; return nil; })();
          listing_content = "" + "<programlisting" + ((function() {if (informal !== false && informal !== nil && informal != null) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + " language=\"" + (node.$attr("language", nil, false)) + "\" linenumbering=\"" + (numbering) + "\">" + (node.$content()) + "</programlisting>";
          } else {
          listing_content = "" + "<screen" + ((function() {if (informal !== false && informal !== nil && informal != null) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + ">" + (node.$content()) + "</screen>"
        };
        if (informal !== false && informal !== nil && informal != null) {
          return listing_content
          } else {
          return "" + "<formalpara" + (listing_attributes) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>\n" + (listing_content) + "\n" + "</para>\n" + "</formalpara>"
        };
      }, TMP_DocBook5Converter_listing_14.$$arity = 1);
      Opal.defn(self, '$literal', TMP_DocBook5Converter_literal_15 = function $$literal(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>\n" + "<literallayout class=\"monospaced\">" + (node.$content()) + "</literallayout>\n" + "</para>\n" + "</formalpara>"
          } else {
          return "" + "<literallayout" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " class=\"monospaced\">" + (node.$content()) + "</literallayout>"
        }
      }, TMP_DocBook5Converter_literal_15.$$arity = 1);
      Opal.defn(self, '$stem', TMP_DocBook5Converter_stem_16 = function $$stem(node) {
        var $a, $b, $c, $d, $e, self = this, idx = nil, equation = nil, equation_data = nil;

        
        if ((($a = (idx = node.$subs().$index("specialcharacters"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          node.$subs().$delete("specialcharacters")};
        equation = node.$content();
        if (idx !== false && idx !== nil && idx != null) {
          node.$subs().$insert(idx, "specialcharacters")};
        if (node.$style()['$==']("asciimath")) {
          if ((($a = ((($b = (($c = Opal.const_get([Opal.Object.$$scope], 'AsciiMath', true, false)) ? 'constant' : nil)) !== false && $b !== nil && $b != null) ? $b : (function() {if ((($d = (($e = self['asciimath_available'], $e != null && $e !== nil) ? 'instance-variable' : nil)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return self.asciimath_available
            } else {
            
            return (self.asciimath_available = Opal.const_get($scopes, 'Helpers', true, true).$require_library("asciimath", true, "warn"));
          }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            equation_data = Opal.const_get([Opal.Object.$$scope], 'AsciiMath', true, true).$parse(equation).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))
            } else {
            equation_data = "" + "<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"
          }
          } else {
          equation_data = "" + "<alt><![CDATA[" + (equation) + "]]></alt>\n" + "<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"
        };
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<equation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (equation_data) + "\n" + "</equation>"
          } else {
          return "" + "<informalequation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (equation_data) + "\n" + "</informalequation>"
        };
      }, TMP_DocBook5Converter_stem_16.$$arity = 1);
      Opal.defn(self, '$olist', TMP_DocBook5Converter_olist_18 = function $$olist(node) {
        var $a, TMP_17, self = this, result = nil, num_attribute = nil, start_attribute = nil;

        
        result = [];
        num_attribute = (function() {if ((($a = node.$style()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " numeration=\"" + (node.$style()) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ((($a = node['$attr?']("start")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " startingnumber=\"" + (node.$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("" + "<orderedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (num_attribute) + (start_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        $send(node.$items(), 'each', [], (TMP_17 = function(item){var self = TMP_17.$$s || this, $b;
if (item == null) item = nil;
        
          result['$<<']("<listitem>");
          result['$<<']("" + "<simpara>" + (item.$text()) + "</simpara>");
          if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</listitem>");}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
        result['$<<']("</orderedlist>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_olist_18.$$arity = 1);
      Opal.defn(self, '$open', TMP_DocBook5Converter_open_19 = function $$open(node) {
        var $a, $b, $c, self = this, $case = nil;

        return (function() {$case = node.$style();
if ("abstract"['$===']($case)) {if ((($a = (($b = node.$parent()['$=='](node.$document())) ? node.$document()['$attr?']("doctype", "book") : node.$parent()['$=='](node.$document()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          self.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
          return "";
          } else {
          return "" + "<abstract>\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n" + "</abstract>"
        }}else if ("partintro"['$===']($case)) {if ((($a = ($b = (($c = node.$level()['$=='](0)) ? node.$parent().$context()['$==']("section") : node.$level()['$=='](0)), $b !== false && $b !== nil && $b != null ?node.$document().$doctype()['$==']("book") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<partintro" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n" + "</partintro>"
          } else {
          
          self.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a part section. Excluding block content.");
          return "";
        }}else {return node.$content()}})()
      }, TMP_DocBook5Converter_open_19.$$arity = 1);
      Opal.defn(self, '$page_break', TMP_DocBook5Converter_page_break_20 = function $$page_break(node) {
        var self = this;

        return "<simpara><?asciidoc-pagebreak?></simpara>"
      }, TMP_DocBook5Converter_page_break_20.$$arity = 1);
      Opal.defn(self, '$paragraph', TMP_DocBook5Converter_paragraph_21 = function $$paragraph(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>" + (node.$content()) + "</para>\n" + "</formalpara>"
          } else {
          return "" + "<simpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">" + (node.$content()) + "</simpara>"
        }
      }, TMP_DocBook5Converter_paragraph_21.$$arity = 1);
      Opal.defn(self, '$preamble', TMP_DocBook5Converter_preamble_22 = function $$preamble(node) {
        var self = this;

        if (node.$document().$doctype()['$==']("book")) {
          return "" + "<preface" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node, false)) + (node.$content()) + "\n" + "</preface>"
          } else {
          return node.$content()
        }
      }, TMP_DocBook5Converter_preamble_22.$$arity = 1);
      Opal.defn(self, '$quote', TMP_DocBook5Converter_quote_23 = function $$quote(node) {
        var $a, $b, self = this, result = nil;

        
        result = [];
        result['$<<']("" + "<blockquote" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        if ((($a = ((($b = node['$attr?']("attribution")) !== false && $b !== nil && $b != null) ? $b : node['$attr?']("citetitle"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          result['$<<']("<attribution>");
          if ((($a = node['$attr?']("attribution")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](node.$attr("attribution"))};
          if ((($a = node['$attr?']("citetitle")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<citetitle>" + (node.$attr("citetitle")) + "</citetitle>")};
          result['$<<']("</attribution>");};
        result['$<<'](self.$resolve_content(node));
        result['$<<']("</blockquote>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_quote_23.$$arity = 1);
      Opal.defn(self, '$thematic_break', TMP_DocBook5Converter_thematic_break_24 = function $$thematic_break(node) {
        var self = this;

        return "<simpara><?asciidoc-hr?></simpara>"
      }, TMP_DocBook5Converter_thematic_break_24.$$arity = 1);
      Opal.defn(self, '$sidebar', TMP_DocBook5Converter_sidebar_25 = function $$sidebar(node) {
        var self = this;

        return "" + "<sidebar" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n" + "</sidebar>"
      }, TMP_DocBook5Converter_sidebar_25.$$arity = 1);
      Opal.cdecl($scope, 'TABLE_PI_NAMES', ["dbhtml", "dbfo", "dblatex"]);
      Opal.cdecl($scope, 'TABLE_SECTIONS', ["head", "foot", "body"]);
      Opal.defn(self, '$table', TMP_DocBook5Converter_table_34 = function $$table(node) {
        var $a, $b, TMP_26, TMP_27, TMP_28, TMP_29, self = this, has_body = nil, result = nil, pgwide_attribute = nil, tag_name = nil, col_width_key = nil, width = nil;

        
        has_body = false;
        result = [];
        pgwide_attribute = (function() {if ((($a = node['$option?']("pgwide")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " pgwide=\"1\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("" + "<" + ((tag_name = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "table"
          } else {
          return "informaltable"
        }; return nil; })())) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (pgwide_attribute) + " frame=\"" + (node.$attr("frame", "all")) + "\" rowsep=\"" + ((function() {if ((($a = ["none", "cols"]['$include?'](node.$attr("grid"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\" colsep=\"" + ((function() {if ((($a = ["none", "rows"]['$include?'](node.$attr("grid"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\"" + ((function() {if ((($a = node['$attr?']("orientation", "landscape", nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " orient=\"land\""
          } else {
          return nil
        }; return nil; })()) + ">");
        if ((($a = node['$option?']("unbreakable")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<?dbfo keep-together=\"always\"?>")
        } else if ((($a = node['$option?']("breakable")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<?dbfo keep-together=\"auto\"?>")};
        if (tag_name['$==']("table")) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        col_width_key = (function() {if ((($a = (width = (function() {if ((($b = node['$attr?']("width")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          
          return node.$attr("width");
          } else {
          return nil
        }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          $send(Opal.const_get($scopes, 'TABLE_PI_NAMES', true, true), 'each', [], (TMP_26 = function(pi_name){var self = TMP_26.$$s || this;
if (pi_name == null) pi_name = nil;
          return result['$<<']("" + "<?" + (pi_name) + " table-width=\"" + (width) + "\"?>")}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
          return "colabswidth";
          } else {
          return "colpcwidth"
        }; return nil; })();
        result['$<<']("" + "<tgroup cols=\"" + (node.$attr("colcount")) + "\">");
        $send(node.$columns(), 'each', [], (TMP_27 = function(col){var self = TMP_27.$$s || this;
if (col == null) col = nil;
        return result['$<<']("" + "<colspec colname=\"col_" + (col.$attr("colnumber")) + "\" colwidth=\"" + (col.$attr(col_width_key)) + "*\"/>")}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
        $send($send(Opal.const_get($scopes, 'TABLE_SECTIONS', true, true), 'select', [], (TMP_28 = function(tblsec){var self = TMP_28.$$s || this;
if (tblsec == null) tblsec = nil;
        return node.$rows()['$[]'](tblsec)['$empty?']()['$!']()}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28)), 'each', [], (TMP_29 = function(tblsec){var self = TMP_29.$$s || this, TMP_30;
if (tblsec == null) tblsec = nil;
        
          if (tblsec['$==']("body")) {
            has_body = true};
          result['$<<']("" + "<t" + (tblsec) + ">");
          $send(node.$rows()['$[]'](tblsec), 'each', [], (TMP_30 = function(row){var self = TMP_30.$$s || this, TMP_31;
if (row == null) row = nil;
          
            result['$<<']("<row>");
            $send(row, 'each', [], (TMP_31 = function(cell){var self = TMP_31.$$s || this, $c, TMP_32, TMP_33, halign_attribute = nil, valign_attribute = nil, colspan_attribute = nil, colnum = nil, rowspan_attribute = nil, entry_start = nil, cell_content = nil, $case = nil, entry_end = nil;
if (cell == null) cell = nil;
            
              halign_attribute = (function() {if ((($c = cell['$attr?']("halign")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + " align=\"" + (cell.$attr("halign")) + "\""
                } else {
                return nil
              }; return nil; })();
              valign_attribute = (function() {if ((($c = cell['$attr?']("valign")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + " valign=\"" + (cell.$attr("valign")) + "\""
                } else {
                return nil
              }; return nil; })();
              colspan_attribute = (function() {if ((($c = cell.$colspan()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + " namest=\"col_" + ((colnum = cell.$column().$attr("colnumber"))) + "\" nameend=\"col_" + ($rb_minus($rb_plus(colnum, cell.$colspan()), 1)) + "\""
                } else {
                return nil
              }; return nil; })();
              rowspan_attribute = (function() {if ((($c = cell.$rowspan()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + " morerows=\"" + ($rb_minus(cell.$rowspan(), 1)) + "\""
                } else {
                return nil
              }; return nil; })();
              entry_start = "" + "<entry" + (halign_attribute) + (valign_attribute) + (colspan_attribute) + (rowspan_attribute) + ">";
              cell_content = (function() {if (tblsec['$==']("head")) {
                return cell.$text()
                } else {
                return (function() {$case = cell.$style();
if ("asciidoc"['$===']($case)) {return cell.$content()}else if ("verse"['$===']($case)) {return "" + "<literallayout>" + (cell.$text()) + "</literallayout>"}else if ("literal"['$===']($case)) {return "" + "<literallayout class=\"monospaced\">" + (cell.$text()) + "</literallayout>"}else if ("header"['$===']($case)) {return $send(cell.$content(), 'map', [], (TMP_32 = function(text){var self = TMP_32.$$s || this;
if (text == null) text = nil;
                return "" + "<simpara><emphasis role=\"strong\">" + (text) + "</emphasis></simpara>"}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32)).$join()}else {return $send(cell.$content(), 'map', [], (TMP_33 = function(text){var self = TMP_33.$$s || this;
if (text == null) text = nil;
                return "" + "<simpara>" + (text) + "</simpara>"}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33)).$join()}})()
              }; return nil; })();
              entry_end = (function() {if ((($c = node.$document()['$attr?']("cellbgcolor")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + "<?dbfo bgcolor=\"" + (node.$document().$attr("cellbgcolor")) + "\"?></entry>"
                } else {
                return "</entry>"
              }; return nil; })();
              return result['$<<']("" + (entry_start) + (cell_content) + (entry_end));}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
            return result['$<<']("</row>");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30));
          return result['$<<']("" + "</t" + (tblsec) + ">");}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
        result['$<<']("</tgroup>");
        result['$<<']("" + "</" + (tag_name) + ">");
        if (has_body !== false && has_body !== nil && has_body != null) {
          } else {
          self.$warn("asciidoctor: WARNING: tables must have at least one body row")
        };
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_table_34.$$arity = 1);
      Opal.alias(self, "toc", "skip");
      Opal.defn(self, '$ulist', TMP_DocBook5Converter_ulist_37 = function $$ulist(node) {
        var $a, TMP_35, TMP_36, self = this, result = nil, mark_type = nil, checklist = nil, mark_attribute = nil;

        
        result = [];
        if (node.$style()['$==']("bibliography")) {
          
          result['$<<']("" + "<bibliodiv" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
          if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
          $send(node.$items(), 'each', [], (TMP_35 = function(item){var self = TMP_35.$$s || this, $b;
if (item == null) item = nil;
          
            result['$<<']("<bibliomixed>");
            result['$<<']("" + "<bibliomisc>" + (item.$text()) + "</bibliomisc>");
            if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              result['$<<'](item.$content())};
            return result['$<<']("</bibliomixed>");}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35));
          result['$<<']("</bibliodiv>");
          } else {
          
          mark_type = (function() {if ((($a = (checklist = node['$option?']("checklist"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "none"
            } else {
            return node.$style()
          }; return nil; })();
          mark_attribute = (function() {if (mark_type !== false && mark_type !== nil && mark_type != null) {
            return "" + " mark=\"" + (mark_type) + "\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("" + "<itemizedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (mark_attribute) + ">");
          if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
          $send(node.$items(), 'each', [], (TMP_36 = function(item){var self = TMP_36.$$s || this, $b, $c, text_marker = nil;
if (item == null) item = nil;
          
            text_marker = (function() {if ((($b = (($c = checklist !== false && checklist !== nil && checklist != null) ? item['$attr?']("checkbox") : checklist)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              if ((($b = item['$attr?']("checked")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                return "&#10003; "
                } else {
                return "&#10063; "
              }
              } else {
              return nil
            }; return nil; })();
            result['$<<']("<listitem>");
            result['$<<']("" + "<simpara>" + (text_marker) + (item.$text()) + "</simpara>");
            if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              result['$<<'](item.$content())};
            return result['$<<']("</listitem>");}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
          result['$<<']("</itemizedlist>");
        };
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_ulist_37.$$arity = 1);
      Opal.defn(self, '$verse', TMP_DocBook5Converter_verse_38 = function $$verse(node) {
        var $a, $b, self = this, result = nil;

        
        result = [];
        result['$<<']("" + "<blockquote" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        if ((($a = ((($b = node['$attr?']("attribution")) !== false && $b !== nil && $b != null) ? $b : node['$attr?']("citetitle"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          result['$<<']("<attribution>");
          if ((($a = node['$attr?']("attribution")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](node.$attr("attribution"))};
          if ((($a = node['$attr?']("citetitle")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<citetitle>" + (node.$attr("citetitle")) + "</citetitle>")};
          result['$<<']("</attribution>");};
        result['$<<']("" + "<literallayout>" + (node.$content()) + "</literallayout>");
        result['$<<']("</blockquote>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_verse_38.$$arity = 1);
      Opal.alias(self, "video", "skip");
      Opal.defn(self, '$inline_anchor', TMP_DocBook5Converter_inline_anchor_39 = function $$inline_anchor(node) {
        var $a, self = this, $case = nil, path = nil, linkend = nil, text = nil, target = nil;

        return (function() {$case = node.$type();
if ("ref"['$===']($case)) {return "" + "<anchor" + (self.$common_attributes(node.$target(), nil, node.$text())) + "/>"}else if ("xref"['$===']($case)) {if ((($a = (path = node.$attributes()['$[]']("path"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<link xl:href=\"" + (node.$target()) + "\">" + (((($a = node.$text()) !== false && $a !== nil && $a != null) ? $a : path)) + "</link>"
          } else {
          
          linkend = ((($a = node.$attributes()['$[]']("fragment")) !== false && $a !== nil && $a != null) ? $a : node.$target());
          if ((($a = (text = node.$text())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
            } else {
            return "" + "<xref linkend=\"" + (linkend) + "\"/>"
          };
        }}else if ("link"['$===']($case)) {return "" + "<link xl:href=\"" + (node.$target()) + "\">" + (node.$text()) + "</link>"}else if ("bibref"['$===']($case)) {
        target = node.$target();
        return "" + "<anchor" + (self.$common_attributes(target, nil, "" + "[" + (target) + "]")) + "/>[" + (target) + "]";}else {return self.$warn("" + "asciidoctor: WARNING: unknown anchor type: " + (node.$type().$inspect()))}})()
      }, TMP_DocBook5Converter_inline_anchor_39.$$arity = 1);
      Opal.defn(self, '$inline_break', TMP_DocBook5Converter_inline_break_40 = function $$inline_break(node) {
        var self = this;

        return "" + (node.$text()) + "<?asciidoc-br?>"
      }, TMP_DocBook5Converter_inline_break_40.$$arity = 1);
      Opal.defn(self, '$inline_button', TMP_DocBook5Converter_inline_button_41 = function $$inline_button(node) {
        var self = this;

        return "" + "<guibutton>" + (node.$text()) + "</guibutton>"
      }, TMP_DocBook5Converter_inline_button_41.$$arity = 1);
      Opal.defn(self, '$inline_callout', TMP_DocBook5Converter_inline_callout_42 = function $$inline_callout(node) {
        var self = this;

        return "" + "<co" + (self.$common_attributes(node.$id())) + "/>"
      }, TMP_DocBook5Converter_inline_callout_42.$$arity = 1);
      Opal.defn(self, '$inline_footnote', TMP_DocBook5Converter_inline_footnote_43 = function $$inline_footnote(node) {
        var self = this;

        if (node.$type()['$==']("xref")) {
          return "" + "<footnoteref linkend=\"" + (node.$target()) + "\"/>"
          } else {
          return "" + "<footnote" + (self.$common_attributes(node.$id())) + "><simpara>" + (node.$text()) + "</simpara></footnote>"
        }
      }, TMP_DocBook5Converter_inline_footnote_43.$$arity = 1);
      Opal.defn(self, '$inline_image', TMP_DocBook5Converter_inline_image_44 = function $$inline_image(node) {
        var $a, self = this, width_attribute = nil, depth_attribute = nil;

        
        width_attribute = (function() {if ((($a = node['$attr?']("width")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " contentwidth=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((($a = node['$attr?']("height")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " contentdepth=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "" + "<inlinemediaobject>\n" + "<imageobject>\n" + "<imagedata fileref=\"" + ((function() {if (node.$type()['$==']("icon")) {
          
          return node.$icon_uri(node.$target());
          } else {
          
          return node.$image_uri(node.$target());
        }; return nil; })()) + "\"" + (width_attribute) + (depth_attribute) + "/>\n" + "</imageobject>\n" + "<textobject><phrase>" + (node.$attr("alt")) + "</phrase></textobject>\n" + "</inlinemediaobject>";
      }, TMP_DocBook5Converter_inline_image_44.$$arity = 1);
      Opal.defn(self, '$inline_indexterm', TMP_DocBook5Converter_inline_indexterm_45 = function $$inline_indexterm(node) {
        var $a, self = this, terms = nil, result = nil, numterms = nil;

        if (node.$type()['$==']("visible")) {
          return "" + "<indexterm><primary>" + (node.$text()) + "</primary></indexterm>" + (node.$text())
          } else {
          
          terms = node.$attr("terms");
          result = [];
          if ((($a = $rb_gt((numterms = terms.$size()), 2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<indexterm>\n" + "<primary>" + (terms['$[]'](0)) + "</primary><secondary>" + (terms['$[]'](1)) + "</secondary><tertiary>" + (terms['$[]'](2)) + "</tertiary>\n" + "</indexterm>")};
          if ((($a = $rb_gt(numterms, 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<indexterm>\n" + "<primary>" + (terms['$[]'](-2)) + "</primary><secondary>" + (terms['$[]'](-1)) + "</secondary>\n" + "</indexterm>")};
          result['$<<']("" + "<indexterm>\n" + "<primary>" + (terms['$[]'](-1)) + "</primary>\n" + "</indexterm>");
          return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
        }
      }, TMP_DocBook5Converter_inline_indexterm_45.$$arity = 1);
      Opal.defn(self, '$inline_kbd', TMP_DocBook5Converter_inline_kbd_47 = function $$inline_kbd(node) {
        var TMP_46, self = this, keys = nil;

        if ((keys = node.$attr("keys")).$size()['$=='](1)) {
          return "" + "<keycap>" + (keys['$[]'](0)) + "</keycap>"
          } else {
          return "" + "<keycombo>" + ($send(keys, 'map', [], (TMP_46 = function(key){var self = TMP_46.$$s || this;
if (key == null) key = nil;
          return "" + "<keycap>" + (key) + "</keycap>"}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46)).$join()) + "</keycombo>"
        }
      }, TMP_DocBook5Converter_inline_kbd_47.$$arity = 1);
      Opal.defn(self, '$inline_menu', TMP_DocBook5Converter_inline_menu_49 = function $$inline_menu(node) {
        var $a, TMP_48, self = this, menu = nil, submenus = nil, submenu_path = nil, menuitem = nil;

        
        menu = node.$attr("menu");
        if ((($a = (submenus = node.$attr("submenus"))['$empty?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          submenu_path = $send(submenus, 'map', [], (TMP_48 = function(submenu){var self = TMP_48.$$s || this;
if (submenu == null) submenu = nil;
          return "" + "<guisubmenu>" + (submenu) + "</guisubmenu> "}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48)).$join().$chop();
          return "" + "<menuchoice><guimenu>" + (menu) + "</guimenu> " + (submenu_path) + " <guimenuitem>" + (node.$attr("menuitem")) + "</guimenuitem></menuchoice>";
        } else if ((($a = (menuitem = node.$attr("menuitem"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<menuchoice><guimenu>" + (menu) + "</guimenu> <guimenuitem>" + (menuitem) + "</guimenuitem></menuchoice>"
          } else {
          return "" + "<guimenu>" + (menu) + "</guimenu>"
        };
      }, TMP_DocBook5Converter_inline_menu_49.$$arity = 1);
      
      $writer = [[nil, nil, true]];
      $send(Opal.cdecl($scope, 'QUOTE_TAGS', $hash2(["emphasis", "strong", "monospaced", "superscript", "subscript", "double", "single", "mark"], {"emphasis": ["<emphasis>", "</emphasis>", true], "strong": ["<emphasis role=\"strong\">", "</emphasis>", true], "monospaced": ["<literal>", "</literal>", false], "superscript": ["<superscript>", "</superscript>", false], "subscript": ["<subscript>", "</subscript>", false], "double": ["&#8220;", "&#8221;", true], "single": ["&#8216;", "&#8217;", true], "mark": ["<emphasis role=\"marked\">", "</emphasis>", false]})), 'default=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defn(self, '$inline_quoted', TMP_DocBook5Converter_inline_quoted_50 = function $$inline_quoted(node) {
        var $a, $b, $c, $d, $e, self = this, type = nil, equation = nil, open = nil, close = nil, supports_phrase = nil, text = nil, role = nil, quoted_text = nil;

        if ((type = node.$type())['$==']("asciimath")) {
          if ((($a = ((($b = (($c = Opal.const_get([Opal.Object.$$scope], 'AsciiMath', true, false)) ? 'constant' : nil)) !== false && $b !== nil && $b != null) ? $b : (function() {if ((($d = (($e = self['asciimath_available'], $e != null && $e !== nil) ? 'instance-variable' : nil)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return self.asciimath_available
            } else {
            
            return (self.asciimath_available = Opal.const_get($scopes, 'Helpers', true, true).$require_library("asciimath", true, "warn"));
          }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + "<inlineequation>" + (Opal.const_get([Opal.Object.$$scope], 'AsciiMath', true, true).$parse(node.$text()).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))) + "</inlineequation>"
            } else {
            return "" + "<inlineequation><mathphrase><![CDATA[" + (node.$text()) + "]]></mathphrase></inlineequation>"
          }
        } else if (type['$==']("latexmath")) {
          return "" + "<inlineequation><alt><![CDATA[" + ((equation = node.$text())) + "]]></alt><mathphrase><![CDATA[" + (equation) + "]]></mathphrase></inlineequation>"
          } else {
          
          $b = Opal.const_get($scopes, 'QUOTE_TAGS', true, true)['$[]'](type), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), (supports_phrase = ($a[2] == null ? nil : $a[2])), $b;
          text = node.$text();
          if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (supports_phrase !== false && supports_phrase !== nil && supports_phrase != null) {
              quoted_text = "" + (open) + "<phrase role=\"" + (role) + "\">" + (text) + "</phrase>" + (close)
              } else {
              quoted_text = "" + (open.$chop()) + " role=\"" + (role) + "\">" + (text) + (close)
            }
            } else {
            quoted_text = "" + (open) + (text) + (close)
          };
          if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + "<anchor" + (self.$common_attributes(node.$id(), nil, text)) + "/>" + (quoted_text)
            } else {
            return quoted_text
          };
        }
      }, TMP_DocBook5Converter_inline_quoted_50.$$arity = 1);
      Opal.defn(self, '$author_element', TMP_DocBook5Converter_author_element_51 = function $$author_element(doc, index) {
        var $a, self = this, firstname_key = nil, middlename_key = nil, lastname_key = nil, email_key = nil, result = nil;

        if (index == null) {
          index = nil;
        }
        
        firstname_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "firstname_" + (index)
          } else {
          return "firstname"
        }; return nil; })();
        middlename_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "middlename_" + (index)
          } else {
          return "middlename"
        }; return nil; })();
        lastname_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "lastname_" + (index)
          } else {
          return "lastname"
        }; return nil; })();
        email_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "email_" + (index)
          } else {
          return "email"
        }; return nil; })();
        result = [];
        result['$<<']("<author>");
        result['$<<']("<personname>");
        if ((($a = doc['$attr?'](firstname_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<firstname>" + (doc.$attr(firstname_key)) + "</firstname>")};
        if ((($a = doc['$attr?'](middlename_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<othername>" + (doc.$attr(middlename_key)) + "</othername>")};
        if ((($a = doc['$attr?'](lastname_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<surname>" + (doc.$attr(lastname_key)) + "</surname>")};
        result['$<<']("</personname>");
        if ((($a = doc['$attr?'](email_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<email>" + (doc.$attr(email_key)) + "</email>")};
        result['$<<']("</author>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_author_element_51.$$arity = -2);
      Opal.defn(self, '$common_attributes', TMP_DocBook5Converter_common_attributes_52 = function $$common_attributes(id, role, reftext) {
        var self = this, res = nil;

        if (role == null) {
          role = nil;
        }
        if (reftext == null) {
          reftext = nil;
        }
        
        res = (function() {if (id !== false && id !== nil && id != null) {
          return "" + " xml:id=\"" + (id) + "\""
          } else {
          return ""
        }; return nil; })();
        if (role !== false && role !== nil && role != null) {
          res = "" + (res) + " role=\"" + (role) + "\""};
        if (reftext !== false && reftext !== nil && reftext != null) {
          res = "" + (res) + " xreflabel=\"" + (reftext) + "\""};
        return res;
      }, TMP_DocBook5Converter_common_attributes_52.$$arity = -2);
      Opal.defn(self, '$doctype_declaration', TMP_DocBook5Converter_doctype_declaration_53 = function $$doctype_declaration(root_tag_name) {
        var self = this;

        return nil
      }, TMP_DocBook5Converter_doctype_declaration_53.$$arity = 1);
      Opal.defn(self, '$document_info_element', TMP_DocBook5Converter_document_info_element_55 = function $$document_info_element(doc, info_tag_prefix, use_info_tag_prefix) {
        var $a, $b, TMP_54, $c, self = this, result = nil, date = nil, authorcount = nil, head_docinfo = nil;

        if (use_info_tag_prefix == null) {
          use_info_tag_prefix = false;
        }
        
        if (use_info_tag_prefix !== false && use_info_tag_prefix !== nil && use_info_tag_prefix != null) {
          } else {
          info_tag_prefix = ""
        };
        result = [];
        result['$<<']("" + "<" + (info_tag_prefix) + "info>");
        if ((($a = doc.$notitle()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](self.$document_title_tags(doc.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true}))))
        };
        if ((($a = (date = (function() {if ((($b = doc['$attr?']("revdate")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          
          return doc.$attr("revdate");
          } else {
          
          if ((($b = doc['$attr?']("reproducible")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return nil
            } else {
            
            return doc.$attr("docdate");
          };
        }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<date>" + (date) + "</date>")};
        if ((($a = doc['$has_header?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          if ((($a = doc['$attr?']("author")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = $rb_lt((authorcount = doc.$attr("authorcount").$to_i()), 2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              
              result['$<<'](self.$author_element(doc));
              if ((($a = doc['$attr?']("authorinitials")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                result['$<<']("" + "<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>")};
              } else {
              
              result['$<<']("<authorgroup>");
              $send(authorcount, 'times', [], (TMP_54 = function(index){var self = TMP_54.$$s || this;
if (index == null) index = nil;
              return result['$<<'](self.$author_element(doc, $rb_plus(index, 1)))}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54));
              result['$<<']("</authorgroup>");
            }};
          if ((($a = ($b = doc['$attr?']("revdate"), $b !== false && $b !== nil && $b != null ?((($c = doc['$attr?']("revnumber")) !== false && $c !== nil && $c != null) ? $c : doc['$attr?']("revremark")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            
            result['$<<']("" + "<revhistory>\n" + "<revision>");
            if ((($a = doc['$attr?']("revnumber")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<revnumber>" + (doc.$attr("revnumber")) + "</revnumber>")};
            if ((($a = doc['$attr?']("revdate")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<date>" + (doc.$attr("revdate")) + "</date>")};
            if ((($a = doc['$attr?']("authorinitials")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>")};
            if ((($a = doc['$attr?']("revremark")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<revremark>" + (doc.$attr("revremark")) + "</revremark>")};
            result['$<<']("" + "</revision>\n" + "</revhistory>");};
          if ((($a = (head_docinfo = doc.$docinfo())['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            result['$<<'](head_docinfo)
          };
          if ((($a = doc['$attr?']("orgname")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<orgname>" + (doc.$attr("orgname")) + "</orgname>")};};
        result['$<<']("" + "</" + (info_tag_prefix) + "info>");
        if (doc.$doctype()['$==']("manpage")) {
          
          result['$<<']("<refmeta>");
          if ((($a = doc['$attr?']("mantitle")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<refentrytitle>" + (doc.$attr("mantitle")) + "</refentrytitle>")};
          if ((($a = doc['$attr?']("manvolnum")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<manvolnum>" + (doc.$attr("manvolnum")) + "</manvolnum>")};
          result['$<<']("</refmeta>");
          result['$<<']("<refnamediv>");
          if ((($a = doc['$attr?']("manname")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<refname>" + (doc.$attr("manname")) + "</refname>")};
          if ((($a = doc['$attr?']("manpurpose")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<refpurpose>" + (doc.$attr("manpurpose")) + "</refpurpose>")};
          result['$<<']("</refnamediv>");};
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_document_info_element_55.$$arity = -3);
      Opal.defn(self, '$document_ns_attributes', TMP_DocBook5Converter_document_ns_attributes_56 = function $$document_ns_attributes(doc) {
        var self = this;

        return " xmlns=\"http://docbook.org/ns/docbook\" xmlns:xl=\"http://www.w3.org/1999/xlink\" version=\"5.0\""
      }, TMP_DocBook5Converter_document_ns_attributes_56.$$arity = 1);
      Opal.defn(self, '$lang_attribute_name', TMP_DocBook5Converter_lang_attribute_name_57 = function $$lang_attribute_name() {
        var self = this;

        return "xml:lang"
      }, TMP_DocBook5Converter_lang_attribute_name_57.$$arity = 0);
      Opal.defn(self, '$document_title_tags', TMP_DocBook5Converter_document_title_tags_58 = function $$document_title_tags(title) {
        var $a, self = this;

        if ((($a = title['$subtitle?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<title>" + (title.$main()) + "</title>\n" + "<subtitle>" + (title.$subtitle()) + "</subtitle>"
          } else {
          return "" + "<title>" + (title) + "</title>"
        }
      }, TMP_DocBook5Converter_document_title_tags_58.$$arity = 1);
      Opal.defn(self, '$resolve_content', TMP_DocBook5Converter_resolve_content_59 = function $$resolve_content(node) {
        var self = this;

        if (node.$content_model()['$==']("compound")) {
          return node.$content()
          } else {
          return "" + "<simpara>" + (node.$content()) + "</simpara>"
        }
      }, TMP_DocBook5Converter_resolve_content_59.$$arity = 1);
      return (Opal.defn(self, '$title_tag', TMP_DocBook5Converter_title_tag_60 = function $$title_tag(node, optional) {
        var $a, $b, self = this;

        if (optional == null) {
          optional = true;
        }
        if ((($a = ((($b = optional['$!']()) !== false && $b !== nil && $b != null) ? $b : node['$title?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<title>" + (node.$title()) + "</title>\n"
          } else {
          return nil
        }
      }, TMP_DocBook5Converter_title_tag_60.$$arity = -2), nil) && 'title_tag';
    })(Opal.const_get($scopes, 'Converter', true, true), Opal.const_get([Opal.const_get($scopes, 'Converter', true, true).$$scope], 'BuiltIn', true, true), $scopes)
  })($scope.base, $scopes)
};

/* Generated by Opal 0.11.0.dev */
(function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$==', '$context', '$parent', '$style', '$attr?', '$attr', '$<<', '$common_attributes', '$id', '$role', '$reftext', '$title?', '$title', '$each_with_index', '$items', '$text', '$blocks?', '$content', '$*', '$type', '$===', '$target', '$[]', '$attributes', '$empty?']);
  
  self.$require("asciidoctor/converter/docbook5");
  return (function($base, $visibility_scopes) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope);

    (function($base, $super, $visibility_scopes) {
      function $DocBook45Converter(){};
      var self = $DocBook45Converter = $klass($base, $super, 'DocBook45Converter', $DocBook45Converter);

      var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_DocBook45Converter_admonition_1, TMP_DocBook45Converter_olist_3, TMP_DocBook45Converter_inline_anchor_4, TMP_DocBook45Converter_author_element_5, TMP_DocBook45Converter_common_attributes_6, TMP_DocBook45Converter_doctype_declaration_7, TMP_DocBook45Converter_document_info_element_8, TMP_DocBook45Converter_lang_attribute_name_9, TMP_DocBook45Converter_document_ns_attributes_10;

      
      Opal.defn(self, '$admonition', TMP_DocBook45Converter_admonition_1 = function $$admonition(node) {
        var self = this, $iter = TMP_DocBook45Converter_admonition_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        TMP_DocBook45Converter_admonition_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if (node.$parent().$context()['$==']("example")) {
          return "" + "<para>\n" + ($send(self, Opal.find_super_dispatcher(self, 'admonition', TMP_DocBook45Converter_admonition_1, false), $zuper, $iter)) + "\n" + "</para>"
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'admonition', TMP_DocBook45Converter_admonition_1, false), $zuper, $iter)
        }
      }, TMP_DocBook45Converter_admonition_1.$$arity = 1);
      Opal.defn(self, '$olist', TMP_DocBook45Converter_olist_3 = function $$olist(node) {
        var $a, TMP_2, self = this, result = nil, num_attribute = nil, start_attribute = nil;

        
        result = [];
        num_attribute = (function() {if ((($a = node.$style()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " numeration=\"" + (node.$style()) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ((($a = node['$attr?']("start")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " override=\"" + (node.$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("" + "<orderedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (num_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        $send(node.$items(), 'each_with_index', [], (TMP_2 = function(item, idx){var self = TMP_2.$$s || this, $b;
if (item == null) item = nil;if (idx == null) idx = nil;
        
          result['$<<']((function() {if (idx['$=='](0)) {
            return "" + "<listitem" + (start_attribute) + ">"
            } else {
            return "<listitem>"
          }; return nil; })());
          result['$<<']("" + "<simpara>" + (item.$text()) + "</simpara>");
          if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</listitem>");}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2));
        result['$<<']("</orderedlist>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook45Converter_olist_3.$$arity = 1);
      Opal.defn(self, '$inline_anchor', TMP_DocBook45Converter_inline_anchor_4 = function $$inline_anchor(node) {
        var $a, self = this, $case = nil, path = nil, linkend = nil, text = nil, target = nil;

        return (function() {$case = node.$type();
if ("ref"['$===']($case)) {return "" + "<anchor" + (self.$common_attributes(node.$target(), nil, node.$text())) + "/>"}else if ("xref"['$===']($case)) {if ((($a = (path = node.$attributes()['$[]']("path"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<ulink url=\"" + (node.$target()) + "\">" + (((($a = node.$text()) !== false && $a !== nil && $a != null) ? $a : path)) + "</ulink>"
          } else {
          
          linkend = ((($a = node.$attributes()['$[]']("fragment")) !== false && $a !== nil && $a != null) ? $a : node.$target());
          if ((($a = (text = node.$text())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
            } else {
            return "" + "<xref linkend=\"" + (linkend) + "\"/>"
          };
        }}else if ("link"['$===']($case)) {return "" + "<ulink url=\"" + (node.$target()) + "\">" + (node.$text()) + "</ulink>"}else if ("bibref"['$===']($case)) {
        target = node.$target();
        return "" + "<anchor" + (self.$common_attributes(target, nil, "" + "[" + (target) + "]")) + "/>[" + (target) + "]";}else { return nil }})()
      }, TMP_DocBook45Converter_inline_anchor_4.$$arity = 1);
      Opal.defn(self, '$author_element', TMP_DocBook45Converter_author_element_5 = function $$author_element(doc, index) {
        var $a, self = this, firstname_key = nil, middlename_key = nil, lastname_key = nil, email_key = nil, result = nil;

        if (index == null) {
          index = nil;
        }
        
        firstname_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "firstname_" + (index)
          } else {
          return "firstname"
        }; return nil; })();
        middlename_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "middlename_" + (index)
          } else {
          return "middlename"
        }; return nil; })();
        lastname_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "lastname_" + (index)
          } else {
          return "lastname"
        }; return nil; })();
        email_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "email_" + (index)
          } else {
          return "email"
        }; return nil; })();
        result = [];
        result['$<<']("<author>");
        if ((($a = doc['$attr?'](firstname_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<firstname>" + (doc.$attr(firstname_key)) + "</firstname>")};
        if ((($a = doc['$attr?'](middlename_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<othername>" + (doc.$attr(middlename_key)) + "</othername>")};
        if ((($a = doc['$attr?'](lastname_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<surname>" + (doc.$attr(lastname_key)) + "</surname>")};
        if ((($a = doc['$attr?'](email_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<email>" + (doc.$attr(email_key)) + "</email>")};
        result['$<<']("</author>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook45Converter_author_element_5.$$arity = -2);
      Opal.defn(self, '$common_attributes', TMP_DocBook45Converter_common_attributes_6 = function $$common_attributes(id, role, reftext) {
        var self = this, res = nil;

        if (role == null) {
          role = nil;
        }
        if (reftext == null) {
          reftext = nil;
        }
        
        res = (function() {if (id !== false && id !== nil && id != null) {
          return "" + " id=\"" + (id) + "\""
          } else {
          return ""
        }; return nil; })();
        if (role !== false && role !== nil && role != null) {
          res = "" + (res) + " role=\"" + (role) + "\""};
        if (reftext !== false && reftext !== nil && reftext != null) {
          res = "" + (res) + " xreflabel=\"" + (reftext) + "\""};
        return res;
      }, TMP_DocBook45Converter_common_attributes_6.$$arity = -2);
      Opal.defn(self, '$doctype_declaration', TMP_DocBook45Converter_doctype_declaration_7 = function $$doctype_declaration(root_tag_name) {
        var self = this;

        return "" + "<!DOCTYPE " + (root_tag_name) + " PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\">"
      }, TMP_DocBook45Converter_doctype_declaration_7.$$arity = 1);
      Opal.defn(self, '$document_info_element', TMP_DocBook45Converter_document_info_element_8 = function $$document_info_element(doc, info_tag_prefix) {
        var self = this, $iter = TMP_DocBook45Converter_document_info_element_8.$$p, $yield = $iter || nil;

        TMP_DocBook45Converter_document_info_element_8.$$p = null;
        return $send(self, Opal.find_super_dispatcher(self, 'document_info_element', TMP_DocBook45Converter_document_info_element_8, false), [doc, info_tag_prefix, true], null)
      }, TMP_DocBook45Converter_document_info_element_8.$$arity = 2);
      Opal.defn(self, '$lang_attribute_name', TMP_DocBook45Converter_lang_attribute_name_9 = function $$lang_attribute_name() {
        var self = this;

        return "lang"
      }, TMP_DocBook45Converter_lang_attribute_name_9.$$arity = 0);
      return (Opal.defn(self, '$document_ns_attributes', TMP_DocBook45Converter_document_ns_attributes_10 = function $$document_ns_attributes(doc) {
        var $a, self = this, ns = nil;

        if ((($a = (ns = doc.$attr("xmlns"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ns['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " xmlns=\"http://docbook.org/ns/docbook\""
            } else {
            return "" + " xmlns=\"" + (ns) + "\""
          }
          } else {
          return nil
        }
      }, TMP_DocBook45Converter_document_ns_attributes_10.$$arity = 1), nil) && 'document_ns_attributes';
    })(Opal.const_get($scopes, 'Converter', true, true), Opal.const_get([Opal.const_get($scopes, 'Converter', true, true).$$scope], 'DocBook5Converter', true, true), $scopes)
  })($scope.base, $scopes);
})(Opal);

/* Generated by Opal 0.11.0.dev */
(function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$doctype', '$<<', '$doctype_declaration', '$attr?', '$attr', '$lang_attribute_name', '$document_ns_attributes', '$document_info_element', '$blocks?', '$content', '$empty?', '$docinfo', '$*', '$document', '$special', '$start_with?', '$sectname', '$<=', '$level', '$common_attributes', '$id', '$role', '$reftext', '$title', '$title_tag', '$resolve_content', '$title?', '$each', '$items', '$text', '$default=', '$-', '$style', '$nil?', '$text?', '$[]', '$image_uri', '$!', '$index', '$subs', '$delete', '$insert', '$require_library', '$to_mathml', '$parse', '$===', '$parent', '$warn', '$context', '$option?', '$include?', '$columns', '$select', '$rows', '$colspan', '$column', '$+', '$rowspan', '$join', '$map', '$type', '$target', '$attributes', '$inspect', '$icon_uri', '$>', '$size', '$chop', '$notitle', '$document_title_tags', '$doctitle', '$has_header?', '$<', '$to_i', '$author_element', '$times', '$subtitle?', '$main', '$subtitle', '$content_model']);
  return (function($base, $visibility_scopes) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope);

    (function($base, $super, $visibility_scopes) {
      function $DocBook5Converter(){};
      var self = $DocBook5Converter = $klass($base, $super, 'DocBook5Converter', $DocBook5Converter);

      var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_DocBook5Converter_document_1, TMP_DocBook5Converter_section_2, TMP_DocBook5Converter_admonition_3, TMP_DocBook5Converter_colist_5, TMP_DocBook5Converter_dlist_10, TMP_DocBook5Converter_example_11, TMP_DocBook5Converter_floating_title_12, TMP_DocBook5Converter_image_13, TMP_DocBook5Converter_listing_14, TMP_DocBook5Converter_literal_15, TMP_DocBook5Converter_stem_16, TMP_DocBook5Converter_olist_18, TMP_DocBook5Converter_open_19, TMP_DocBook5Converter_page_break_20, TMP_DocBook5Converter_paragraph_21, TMP_DocBook5Converter_preamble_22, TMP_DocBook5Converter_quote_23, TMP_DocBook5Converter_thematic_break_24, TMP_DocBook5Converter_sidebar_25, TMP_DocBook5Converter_table_34, TMP_DocBook5Converter_ulist_37, TMP_DocBook5Converter_verse_38, TMP_DocBook5Converter_inline_anchor_39, TMP_DocBook5Converter_inline_break_40, TMP_DocBook5Converter_inline_button_41, TMP_DocBook5Converter_inline_callout_42, TMP_DocBook5Converter_inline_footnote_43, TMP_DocBook5Converter_inline_image_44, TMP_DocBook5Converter_inline_indexterm_45, TMP_DocBook5Converter_inline_kbd_47, TMP_DocBook5Converter_inline_menu_49, TMP_DocBook5Converter_inline_quoted_50, TMP_DocBook5Converter_author_element_51, TMP_DocBook5Converter_common_attributes_52, TMP_DocBook5Converter_doctype_declaration_53, TMP_DocBook5Converter_document_info_element_55, TMP_DocBook5Converter_document_ns_attributes_56, TMP_DocBook5Converter_lang_attribute_name_57, TMP_DocBook5Converter_document_title_tags_58, TMP_DocBook5Converter_resolve_content_59, TMP_DocBook5Converter_title_tag_60, $writer = nil;

      def.asciimath_available = nil;
      
      Opal.defn(self, '$document', TMP_DocBook5Converter_document_1 = function $$document(node) {
        var $a, self = this, result = nil, root_tag_name = nil, doctype_line = nil, lang_attribute = nil, footer_docinfo = nil;

        
        result = [];
        if ((root_tag_name = node.$doctype())['$==']("manpage")) {
          root_tag_name = "refentry"};
        result['$<<']("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        if ((($a = (doctype_line = self.$doctype_declaration(root_tag_name))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](doctype_line)};
        if ((($a = node['$attr?']("toc")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("toclevels")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<?asciidoc-toc maxdepth=\"" + (node.$attr("toclevels")) + "\"?>")
            } else {
            result['$<<']("<?asciidoc-toc?>")
          }};
        if ((($a = node['$attr?']("sectnums")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("sectnumlevels")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<?asciidoc-numbered maxdepth=\"" + (node.$attr("sectnumlevels")) + "\"?>")
            } else {
            result['$<<']("<?asciidoc-numbered?>")
          }};
        lang_attribute = (function() {if ((($a = node['$attr?']("nolang")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return "" + " " + (self.$lang_attribute_name()) + "=\"" + (node.$attr("lang", "en")) + "\""
        }; return nil; })();
        result['$<<']("" + "<" + (root_tag_name) + (self.$document_ns_attributes(node)) + (lang_attribute) + ">");
        result['$<<'](self.$document_info_element(node, root_tag_name));
        if ((($a = node['$blocks?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](node.$content())};
        if ((($a = (footer_docinfo = node.$docinfo("footer"))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](footer_docinfo)
        };
        result['$<<']("" + "</" + (root_tag_name) + ">");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_document_1.$$arity = 1);
      Opal.alias(self, "embedded", "content");
      Opal.defn(self, '$section', TMP_DocBook5Converter_section_2 = function $$section(node) {
        var $a, $b, self = this, doctype = nil, tag_name = nil;

        
        doctype = node.$document().$doctype();
        if ((($a = node.$special()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (tag_name = node.$sectname())['$start_with?']("sect")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            tag_name = "section"}
          } else {
          tag_name = (function() {if ((($a = (($b = doctype['$==']("book")) ? $rb_le(node.$level(), 1) : doctype['$==']("book"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            
            if (node.$level()['$=='](0)) {
              return "part"
              } else {
              return "chapter"
            };
            } else {
            return "section"
          }; return nil; })()
        };
        if (doctype['$==']("manpage")) {
          if (tag_name['$==']("section")) {
            tag_name = "refsection"
          } else if (tag_name['$==']("synopsis")) {
            tag_name = "refsynopsisdiv"}};
        return "" + "<" + (tag_name) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (node.$content()) + "\n" + "</" + (tag_name) + ">";
      }, TMP_DocBook5Converter_section_2.$$arity = 1);
      Opal.defn(self, '$admonition', TMP_DocBook5Converter_admonition_3 = function $$admonition(node) {
        var self = this, tag_name = nil;

        return "" + "<" + ((tag_name = node.$attr("name"))) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n" + "</" + (tag_name) + ">"
      }, TMP_DocBook5Converter_admonition_3.$$arity = 1);
      Opal.alias(self, "audio", "skip");
      Opal.defn(self, '$colist', TMP_DocBook5Converter_colist_5 = function $$colist(node) {
        var $a, TMP_4, self = this, result = nil;

        
        result = [];
        result['$<<']("" + "<calloutlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        $send(node.$items(), 'each', [], (TMP_4 = function(item){var self = TMP_4.$$s || this, $b;
if (item == null) item = nil;
        
          result['$<<']("" + "<callout arearefs=\"" + (item.$attr("coids")) + "\">");
          result['$<<']("" + "<para>" + (item.$text()) + "</para>");
          if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</callout>");}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        result['$<<']("</calloutlist>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_colist_5.$$arity = 1);
      
      $writer = [$hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"})];
      $send(Opal.cdecl($scope, 'DLIST_TAGS', $hash2(["labeled", "qanda", "glossary"], {"labeled": $hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"}), "qanda": $hash2(["list", "entry", "label", "term", "item"], {"list": "qandaset", "entry": "qandaentry", "label": "question", "term": "simpara", "item": "answer"}), "glossary": $hash2(["list", "entry", "term", "item"], {"list": nil, "entry": "glossentry", "term": "glossterm", "item": "glossdef"})})), 'default=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defn(self, '$dlist', TMP_DocBook5Converter_dlist_10 = function $$dlist(node) {
        var $a, TMP_6, TMP_8, self = this, result = nil, tag_name = nil, tags = nil, list_tag = nil, entry_tag = nil, label_tag = nil, term_tag = nil, item_tag = nil;

        
        result = [];
        if (node.$style()['$==']("horizontal")) {
          
          result['$<<']("" + "<" + ((tag_name = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "table"
            } else {
            return "informaltable"
          }; return nil; })())) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " tabstyle=\"horizontal\" frame=\"none\" colsep=\"0\" rowsep=\"0\">\n" + (self.$title_tag(node)) + "<tgroup cols=\"2\">\n" + "<colspec colwidth=\"" + (node.$attr("labelwidth", 15)) + "*\"/>\n" + "<colspec colwidth=\"" + (node.$attr("itemwidth", 85)) + "*\"/>\n" + "<tbody valign=\"top\">");
          $send(node.$items(), 'each', [], (TMP_6 = function(terms, dd){var self = TMP_6.$$s || this, TMP_7, $b;
if (terms == null) terms = nil;if (dd == null) dd = nil;
          
            result['$<<']("" + "<row>\n" + "<entry>");
            $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_7 = function(dt){var self = TMP_7.$$s || this;
if (dt == null) dt = nil;
            return result['$<<']("" + "<simpara>" + (dt.$text()) + "</simpara>")}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
            result['$<<']("" + "</entry>\n" + "<entry>");
            if ((($b = dd['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              } else {
              
              if ((($b = dd['$text?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                result['$<<']("" + "<simpara>" + (dd.$text()) + "</simpara>")};
              if ((($b = dd['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                result['$<<'](dd.$content())};
            };
            return result['$<<']("" + "</entry>\n" + "</row>");}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6));
          result['$<<']("" + "</tbody>\n" + "</tgroup>\n" + "</" + (tag_name) + ">");
          } else {
          
          tags = Opal.const_get($scopes, 'DLIST_TAGS', true, true)['$[]'](node.$style());
          list_tag = tags['$[]']("list");
          entry_tag = tags['$[]']("entry");
          label_tag = tags['$[]']("label");
          term_tag = tags['$[]']("term");
          item_tag = tags['$[]']("item");
          if (list_tag !== false && list_tag !== nil && list_tag != null) {
            
            result['$<<']("" + "<" + (list_tag) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
            if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<title>" + (node.$title()) + "</title>")};};
          $send(node.$items(), 'each', [], (TMP_8 = function(terms, dd){var self = TMP_8.$$s || this, TMP_9, $b;
if (terms == null) terms = nil;if (dd == null) dd = nil;
          
            result['$<<']("" + "<" + (entry_tag) + ">");
            if (label_tag !== false && label_tag !== nil && label_tag != null) {
              result['$<<']("" + "<" + (label_tag) + ">")};
            $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_9 = function(dt){var self = TMP_9.$$s || this;
if (dt == null) dt = nil;
            return result['$<<']("" + "<" + (term_tag) + ">" + (dt.$text()) + "</" + (term_tag) + ">")}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
            if (label_tag !== false && label_tag !== nil && label_tag != null) {
              result['$<<']("" + "</" + (label_tag) + ">")};
            result['$<<']("" + "<" + (item_tag) + ">");
            if ((($b = dd['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              } else {
              
              if ((($b = dd['$text?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                result['$<<']("" + "<simpara>" + (dd.$text()) + "</simpara>")};
              if ((($b = dd['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                result['$<<'](dd.$content())};
            };
            result['$<<']("" + "</" + (item_tag) + ">");
            return result['$<<']("" + "</" + (entry_tag) + ">");}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8));
          if (list_tag !== false && list_tag !== nil && list_tag != null) {
            result['$<<']("" + "</" + (list_tag) + ">")};
        };
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_dlist_10.$$arity = 1);
      Opal.defn(self, '$example', TMP_DocBook5Converter_example_11 = function $$example(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<example" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (self.$resolve_content(node)) + "\n" + "</example>"
          } else {
          return "" + "<informalexample" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$resolve_content(node)) + "\n" + "</informalexample>"
        }
      }, TMP_DocBook5Converter_example_11.$$arity = 1);
      Opal.defn(self, '$floating_title', TMP_DocBook5Converter_floating_title_12 = function $$floating_title(node) {
        var self = this;

        return "" + "<bridgehead" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " renderas=\"sect" + (node.$level()) + "\">" + (node.$title()) + "</bridgehead>"
      }, TMP_DocBook5Converter_floating_title_12.$$arity = 1);
      Opal.defn(self, '$image', TMP_DocBook5Converter_image_13 = function $$image(node) {
        var $a, self = this, width_attribute = nil, depth_attribute = nil, swidth_attribute = nil, scale_attribute = nil, align_attribute = nil, mediaobject = nil;

        
        width_attribute = (function() {if ((($a = node['$attr?']("width")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " contentwidth=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((($a = node['$attr?']("height")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " contentdepth=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        swidth_attribute = (function() {if ((($a = node['$attr?']("scaledwidth")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " width=\"" + (node.$attr("scaledwidth")) + "\" scalefit=\"1\""
          } else {
          return nil
        }; return nil; })();
        scale_attribute = (function() {if ((($a = node['$attr?']("scale")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " scale=\"" + (node.$attr("scale")) + "\""
          } else {
          return nil
        }; return nil; })();
        align_attribute = (function() {if ((($a = node['$attr?']("align")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " align=\"" + (node.$attr("align")) + "\""
          } else {
          return nil
        }; return nil; })();
        mediaobject = "" + "<mediaobject>\n" + "<imageobject>\n" + "<imagedata fileref=\"" + (node.$image_uri(node.$attr("target"))) + "\"" + (width_attribute) + (depth_attribute) + (swidth_attribute) + (scale_attribute) + (align_attribute) + "/>\n" + "</imageobject>\n" + "<textobject><phrase>" + (node.$attr("alt")) + "</phrase></textobject>\n" + "</mediaobject>";
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<figure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (mediaobject) + "\n" + "</figure>"
          } else {
          return "" + "<informalfigure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (mediaobject) + "\n" + "</informalfigure>"
        };
      }, TMP_DocBook5Converter_image_13.$$arity = 1);
      Opal.defn(self, '$listing', TMP_DocBook5Converter_listing_14 = function $$listing(node) {
        var $a, $b, self = this, informal = nil, listing_attributes = nil, numbering = nil, listing_content = nil;

        
        informal = node['$title?']()['$!']();
        listing_attributes = self.$common_attributes(node.$id(), node.$role(), node.$reftext());
        if ((($a = (($b = node.$style()['$==']("source")) ? node['$attr?']("language") : node.$style()['$==']("source"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          numbering = (function() {if ((($a = node['$attr?']("linenums")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "numbered"
            } else {
            return "unnumbered"
          }; return nil; })();
          listing_content = "" + "<programlisting" + ((function() {if (informal !== false && informal !== nil && informal != null) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + " language=\"" + (node.$attr("language", nil, false)) + "\" linenumbering=\"" + (numbering) + "\">" + (node.$content()) + "</programlisting>";
          } else {
          listing_content = "" + "<screen" + ((function() {if (informal !== false && informal !== nil && informal != null) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + ">" + (node.$content()) + "</screen>"
        };
        if (informal !== false && informal !== nil && informal != null) {
          return listing_content
          } else {
          return "" + "<formalpara" + (listing_attributes) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>\n" + (listing_content) + "\n" + "</para>\n" + "</formalpara>"
        };
      }, TMP_DocBook5Converter_listing_14.$$arity = 1);
      Opal.defn(self, '$literal', TMP_DocBook5Converter_literal_15 = function $$literal(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>\n" + "<literallayout class=\"monospaced\">" + (node.$content()) + "</literallayout>\n" + "</para>\n" + "</formalpara>"
          } else {
          return "" + "<literallayout" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " class=\"monospaced\">" + (node.$content()) + "</literallayout>"
        }
      }, TMP_DocBook5Converter_literal_15.$$arity = 1);
      Opal.defn(self, '$stem', TMP_DocBook5Converter_stem_16 = function $$stem(node) {
        var $a, $b, $c, $d, $e, self = this, idx = nil, equation = nil, equation_data = nil;

        
        if ((($a = (idx = node.$subs().$index("specialcharacters"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          node.$subs().$delete("specialcharacters")};
        equation = node.$content();
        if (idx !== false && idx !== nil && idx != null) {
          node.$subs().$insert(idx, "specialcharacters")};
        if (node.$style()['$==']("asciimath")) {
          if ((($a = ((($b = (($c = Opal.const_get([Opal.Object.$$scope], 'AsciiMath', true, false)) ? 'constant' : nil)) !== false && $b !== nil && $b != null) ? $b : (function() {if ((($d = (($e = self['asciimath_available'], $e != null && $e !== nil) ? 'instance-variable' : nil)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return self.asciimath_available
            } else {
            
            return (self.asciimath_available = Opal.const_get($scopes, 'Helpers', true, true).$require_library("asciimath", true, "warn"));
          }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            equation_data = Opal.const_get([Opal.Object.$$scope], 'AsciiMath', true, true).$parse(equation).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))
            } else {
            equation_data = "" + "<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"
          }
          } else {
          equation_data = "" + "<alt><![CDATA[" + (equation) + "]]></alt>\n" + "<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"
        };
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<equation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (equation_data) + "\n" + "</equation>"
          } else {
          return "" + "<informalequation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (equation_data) + "\n" + "</informalequation>"
        };
      }, TMP_DocBook5Converter_stem_16.$$arity = 1);
      Opal.defn(self, '$olist', TMP_DocBook5Converter_olist_18 = function $$olist(node) {
        var $a, TMP_17, self = this, result = nil, num_attribute = nil, start_attribute = nil;

        
        result = [];
        num_attribute = (function() {if ((($a = node.$style()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " numeration=\"" + (node.$style()) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ((($a = node['$attr?']("start")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " startingnumber=\"" + (node.$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("" + "<orderedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (num_attribute) + (start_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        $send(node.$items(), 'each', [], (TMP_17 = function(item){var self = TMP_17.$$s || this, $b;
if (item == null) item = nil;
        
          result['$<<']("<listitem>");
          result['$<<']("" + "<simpara>" + (item.$text()) + "</simpara>");
          if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</listitem>");}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
        result['$<<']("</orderedlist>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_olist_18.$$arity = 1);
      Opal.defn(self, '$open', TMP_DocBook5Converter_open_19 = function $$open(node) {
        var $a, $b, $c, self = this, $case = nil;

        return (function() {$case = node.$style();
if ("abstract"['$===']($case)) {if ((($a = (($b = node.$parent()['$=='](node.$document())) ? node.$document()['$attr?']("doctype", "book") : node.$parent()['$=='](node.$document()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          self.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
          return "";
          } else {
          return "" + "<abstract>\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n" + "</abstract>"
        }}else if ("partintro"['$===']($case)) {if ((($a = ($b = (($c = node.$level()['$=='](0)) ? node.$parent().$context()['$==']("section") : node.$level()['$=='](0)), $b !== false && $b !== nil && $b != null ?node.$document().$doctype()['$==']("book") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<partintro" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n" + "</partintro>"
          } else {
          
          self.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a part section. Excluding block content.");
          return "";
        }}else {return node.$content()}})()
      }, TMP_DocBook5Converter_open_19.$$arity = 1);
      Opal.defn(self, '$page_break', TMP_DocBook5Converter_page_break_20 = function $$page_break(node) {
        var self = this;

        return "<simpara><?asciidoc-pagebreak?></simpara>"
      }, TMP_DocBook5Converter_page_break_20.$$arity = 1);
      Opal.defn(self, '$paragraph', TMP_DocBook5Converter_paragraph_21 = function $$paragraph(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>" + (node.$content()) + "</para>\n" + "</formalpara>"
          } else {
          return "" + "<simpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">" + (node.$content()) + "</simpara>"
        }
      }, TMP_DocBook5Converter_paragraph_21.$$arity = 1);
      Opal.defn(self, '$preamble', TMP_DocBook5Converter_preamble_22 = function $$preamble(node) {
        var self = this;

        if (node.$document().$doctype()['$==']("book")) {
          return "" + "<preface" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node, false)) + (node.$content()) + "\n" + "</preface>"
          } else {
          return node.$content()
        }
      }, TMP_DocBook5Converter_preamble_22.$$arity = 1);
      Opal.defn(self, '$quote', TMP_DocBook5Converter_quote_23 = function $$quote(node) {
        var $a, $b, self = this, result = nil;

        
        result = [];
        result['$<<']("" + "<blockquote" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        if ((($a = ((($b = node['$attr?']("attribution")) !== false && $b !== nil && $b != null) ? $b : node['$attr?']("citetitle"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          result['$<<']("<attribution>");
          if ((($a = node['$attr?']("attribution")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](node.$attr("attribution"))};
          if ((($a = node['$attr?']("citetitle")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<citetitle>" + (node.$attr("citetitle")) + "</citetitle>")};
          result['$<<']("</attribution>");};
        result['$<<'](self.$resolve_content(node));
        result['$<<']("</blockquote>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_quote_23.$$arity = 1);
      Opal.defn(self, '$thematic_break', TMP_DocBook5Converter_thematic_break_24 = function $$thematic_break(node) {
        var self = this;

        return "<simpara><?asciidoc-hr?></simpara>"
      }, TMP_DocBook5Converter_thematic_break_24.$$arity = 1);
      Opal.defn(self, '$sidebar', TMP_DocBook5Converter_sidebar_25 = function $$sidebar(node) {
        var self = this;

        return "" + "<sidebar" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n" + "</sidebar>"
      }, TMP_DocBook5Converter_sidebar_25.$$arity = 1);
      Opal.cdecl($scope, 'TABLE_PI_NAMES', ["dbhtml", "dbfo", "dblatex"]);
      Opal.cdecl($scope, 'TABLE_SECTIONS', ["head", "foot", "body"]);
      Opal.defn(self, '$table', TMP_DocBook5Converter_table_34 = function $$table(node) {
        var $a, $b, TMP_26, TMP_27, TMP_28, TMP_29, self = this, has_body = nil, result = nil, pgwide_attribute = nil, tag_name = nil, col_width_key = nil, width = nil;

        
        has_body = false;
        result = [];
        pgwide_attribute = (function() {if ((($a = node['$option?']("pgwide")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " pgwide=\"1\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("" + "<" + ((tag_name = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "table"
          } else {
          return "informaltable"
        }; return nil; })())) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (pgwide_attribute) + " frame=\"" + (node.$attr("frame", "all")) + "\" rowsep=\"" + ((function() {if ((($a = ["none", "cols"]['$include?'](node.$attr("grid"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\" colsep=\"" + ((function() {if ((($a = ["none", "rows"]['$include?'](node.$attr("grid"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\"" + ((function() {if ((($a = node['$attr?']("orientation", "landscape", nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " orient=\"land\""
          } else {
          return nil
        }; return nil; })()) + ">");
        if ((($a = node['$option?']("unbreakable")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<?dbfo keep-together=\"always\"?>")
        } else if ((($a = node['$option?']("breakable")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<?dbfo keep-together=\"auto\"?>")};
        if (tag_name['$==']("table")) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        col_width_key = (function() {if ((($a = (width = (function() {if ((($b = node['$attr?']("width")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          
          return node.$attr("width");
          } else {
          return nil
        }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          $send(Opal.const_get($scopes, 'TABLE_PI_NAMES', true, true), 'each', [], (TMP_26 = function(pi_name){var self = TMP_26.$$s || this;
if (pi_name == null) pi_name = nil;
          return result['$<<']("" + "<?" + (pi_name) + " table-width=\"" + (width) + "\"?>")}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
          return "colabswidth";
          } else {
          return "colpcwidth"
        }; return nil; })();
        result['$<<']("" + "<tgroup cols=\"" + (node.$attr("colcount")) + "\">");
        $send(node.$columns(), 'each', [], (TMP_27 = function(col){var self = TMP_27.$$s || this;
if (col == null) col = nil;
        return result['$<<']("" + "<colspec colname=\"col_" + (col.$attr("colnumber")) + "\" colwidth=\"" + (col.$attr(col_width_key)) + "*\"/>")}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
        $send($send(Opal.const_get($scopes, 'TABLE_SECTIONS', true, true), 'select', [], (TMP_28 = function(tblsec){var self = TMP_28.$$s || this;
if (tblsec == null) tblsec = nil;
        return node.$rows()['$[]'](tblsec)['$empty?']()['$!']()}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28)), 'each', [], (TMP_29 = function(tblsec){var self = TMP_29.$$s || this, TMP_30;
if (tblsec == null) tblsec = nil;
        
          if (tblsec['$==']("body")) {
            has_body = true};
          result['$<<']("" + "<t" + (tblsec) + ">");
          $send(node.$rows()['$[]'](tblsec), 'each', [], (TMP_30 = function(row){var self = TMP_30.$$s || this, TMP_31;
if (row == null) row = nil;
          
            result['$<<']("<row>");
            $send(row, 'each', [], (TMP_31 = function(cell){var self = TMP_31.$$s || this, $c, TMP_32, TMP_33, halign_attribute = nil, valign_attribute = nil, colspan_attribute = nil, colnum = nil, rowspan_attribute = nil, entry_start = nil, cell_content = nil, $case = nil, entry_end = nil;
if (cell == null) cell = nil;
            
              halign_attribute = (function() {if ((($c = cell['$attr?']("halign")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + " align=\"" + (cell.$attr("halign")) + "\""
                } else {
                return nil
              }; return nil; })();
              valign_attribute = (function() {if ((($c = cell['$attr?']("valign")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + " valign=\"" + (cell.$attr("valign")) + "\""
                } else {
                return nil
              }; return nil; })();
              colspan_attribute = (function() {if ((($c = cell.$colspan()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + " namest=\"col_" + ((colnum = cell.$column().$attr("colnumber"))) + "\" nameend=\"col_" + ($rb_minus($rb_plus(colnum, cell.$colspan()), 1)) + "\""
                } else {
                return nil
              }; return nil; })();
              rowspan_attribute = (function() {if ((($c = cell.$rowspan()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + " morerows=\"" + ($rb_minus(cell.$rowspan(), 1)) + "\""
                } else {
                return nil
              }; return nil; })();
              entry_start = "" + "<entry" + (halign_attribute) + (valign_attribute) + (colspan_attribute) + (rowspan_attribute) + ">";
              cell_content = (function() {if (tblsec['$==']("head")) {
                return cell.$text()
                } else {
                return (function() {$case = cell.$style();
if ("asciidoc"['$===']($case)) {return cell.$content()}else if ("verse"['$===']($case)) {return "" + "<literallayout>" + (cell.$text()) + "</literallayout>"}else if ("literal"['$===']($case)) {return "" + "<literallayout class=\"monospaced\">" + (cell.$text()) + "</literallayout>"}else if ("header"['$===']($case)) {return $send(cell.$content(), 'map', [], (TMP_32 = function(text){var self = TMP_32.$$s || this;
if (text == null) text = nil;
                return "" + "<simpara><emphasis role=\"strong\">" + (text) + "</emphasis></simpara>"}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32)).$join()}else {return $send(cell.$content(), 'map', [], (TMP_33 = function(text){var self = TMP_33.$$s || this;
if (text == null) text = nil;
                return "" + "<simpara>" + (text) + "</simpara>"}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33)).$join()}})()
              }; return nil; })();
              entry_end = (function() {if ((($c = node.$document()['$attr?']("cellbgcolor")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return "" + "<?dbfo bgcolor=\"" + (node.$document().$attr("cellbgcolor")) + "\"?></entry>"
                } else {
                return "</entry>"
              }; return nil; })();
              return result['$<<']("" + (entry_start) + (cell_content) + (entry_end));}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
            return result['$<<']("</row>");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30));
          return result['$<<']("" + "</t" + (tblsec) + ">");}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
        result['$<<']("</tgroup>");
        result['$<<']("" + "</" + (tag_name) + ">");
        if (has_body !== false && has_body !== nil && has_body != null) {
          } else {
          self.$warn("asciidoctor: WARNING: tables must have at least one body row")
        };
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_table_34.$$arity = 1);
      Opal.alias(self, "toc", "skip");
      Opal.defn(self, '$ulist', TMP_DocBook5Converter_ulist_37 = function $$ulist(node) {
        var $a, TMP_35, TMP_36, self = this, result = nil, mark_type = nil, checklist = nil, mark_attribute = nil;

        
        result = [];
        if (node.$style()['$==']("bibliography")) {
          
          result['$<<']("" + "<bibliodiv" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
          if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
          $send(node.$items(), 'each', [], (TMP_35 = function(item){var self = TMP_35.$$s || this, $b;
if (item == null) item = nil;
          
            result['$<<']("<bibliomixed>");
            result['$<<']("" + "<bibliomisc>" + (item.$text()) + "</bibliomisc>");
            if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              result['$<<'](item.$content())};
            return result['$<<']("</bibliomixed>");}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35));
          result['$<<']("</bibliodiv>");
          } else {
          
          mark_type = (function() {if ((($a = (checklist = node['$option?']("checklist"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "none"
            } else {
            return node.$style()
          }; return nil; })();
          mark_attribute = (function() {if (mark_type !== false && mark_type !== nil && mark_type != null) {
            return "" + " mark=\"" + (mark_type) + "\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("" + "<itemizedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (mark_attribute) + ">");
          if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
          $send(node.$items(), 'each', [], (TMP_36 = function(item){var self = TMP_36.$$s || this, $b, $c, text_marker = nil;
if (item == null) item = nil;
          
            text_marker = (function() {if ((($b = (($c = checklist !== false && checklist !== nil && checklist != null) ? item['$attr?']("checkbox") : checklist)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              if ((($b = item['$attr?']("checked")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                return "&#10003; "
                } else {
                return "&#10063; "
              }
              } else {
              return nil
            }; return nil; })();
            result['$<<']("<listitem>");
            result['$<<']("" + "<simpara>" + (text_marker) + (item.$text()) + "</simpara>");
            if ((($b = item['$blocks?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              result['$<<'](item.$content())};
            return result['$<<']("</listitem>");}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
          result['$<<']("</itemizedlist>");
        };
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_ulist_37.$$arity = 1);
      Opal.defn(self, '$verse', TMP_DocBook5Converter_verse_38 = function $$verse(node) {
        var $a, $b, self = this, result = nil;

        
        result = [];
        result['$<<']("" + "<blockquote" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<title>" + (node.$title()) + "</title>")};
        if ((($a = ((($b = node['$attr?']("attribution")) !== false && $b !== nil && $b != null) ? $b : node['$attr?']("citetitle"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          result['$<<']("<attribution>");
          if ((($a = node['$attr?']("attribution")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](node.$attr("attribution"))};
          if ((($a = node['$attr?']("citetitle")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<citetitle>" + (node.$attr("citetitle")) + "</citetitle>")};
          result['$<<']("</attribution>");};
        result['$<<']("" + "<literallayout>" + (node.$content()) + "</literallayout>");
        result['$<<']("</blockquote>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_verse_38.$$arity = 1);
      Opal.alias(self, "video", "skip");
      Opal.defn(self, '$inline_anchor', TMP_DocBook5Converter_inline_anchor_39 = function $$inline_anchor(node) {
        var $a, self = this, $case = nil, path = nil, linkend = nil, text = nil, target = nil;

        return (function() {$case = node.$type();
if ("ref"['$===']($case)) {return "" + "<anchor" + (self.$common_attributes(node.$target(), nil, node.$text())) + "/>"}else if ("xref"['$===']($case)) {if ((($a = (path = node.$attributes()['$[]']("path"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<link xl:href=\"" + (node.$target()) + "\">" + (((($a = node.$text()) !== false && $a !== nil && $a != null) ? $a : path)) + "</link>"
          } else {
          
          linkend = ((($a = node.$attributes()['$[]']("fragment")) !== false && $a !== nil && $a != null) ? $a : node.$target());
          if ((($a = (text = node.$text())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
            } else {
            return "" + "<xref linkend=\"" + (linkend) + "\"/>"
          };
        }}else if ("link"['$===']($case)) {return "" + "<link xl:href=\"" + (node.$target()) + "\">" + (node.$text()) + "</link>"}else if ("bibref"['$===']($case)) {
        target = node.$target();
        return "" + "<anchor" + (self.$common_attributes(target, nil, "" + "[" + (target) + "]")) + "/>[" + (target) + "]";}else {return self.$warn("" + "asciidoctor: WARNING: unknown anchor type: " + (node.$type().$inspect()))}})()
      }, TMP_DocBook5Converter_inline_anchor_39.$$arity = 1);
      Opal.defn(self, '$inline_break', TMP_DocBook5Converter_inline_break_40 = function $$inline_break(node) {
        var self = this;

        return "" + (node.$text()) + "<?asciidoc-br?>"
      }, TMP_DocBook5Converter_inline_break_40.$$arity = 1);
      Opal.defn(self, '$inline_button', TMP_DocBook5Converter_inline_button_41 = function $$inline_button(node) {
        var self = this;

        return "" + "<guibutton>" + (node.$text()) + "</guibutton>"
      }, TMP_DocBook5Converter_inline_button_41.$$arity = 1);
      Opal.defn(self, '$inline_callout', TMP_DocBook5Converter_inline_callout_42 = function $$inline_callout(node) {
        var self = this;

        return "" + "<co" + (self.$common_attributes(node.$id())) + "/>"
      }, TMP_DocBook5Converter_inline_callout_42.$$arity = 1);
      Opal.defn(self, '$inline_footnote', TMP_DocBook5Converter_inline_footnote_43 = function $$inline_footnote(node) {
        var self = this;

        if (node.$type()['$==']("xref")) {
          return "" + "<footnoteref linkend=\"" + (node.$target()) + "\"/>"
          } else {
          return "" + "<footnote" + (self.$common_attributes(node.$id())) + "><simpara>" + (node.$text()) + "</simpara></footnote>"
        }
      }, TMP_DocBook5Converter_inline_footnote_43.$$arity = 1);
      Opal.defn(self, '$inline_image', TMP_DocBook5Converter_inline_image_44 = function $$inline_image(node) {
        var $a, self = this, width_attribute = nil, depth_attribute = nil;

        
        width_attribute = (function() {if ((($a = node['$attr?']("width")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " contentwidth=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((($a = node['$attr?']("height")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + " contentdepth=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "" + "<inlinemediaobject>\n" + "<imageobject>\n" + "<imagedata fileref=\"" + ((function() {if (node.$type()['$==']("icon")) {
          
          return node.$icon_uri(node.$target());
          } else {
          
          return node.$image_uri(node.$target());
        }; return nil; })()) + "\"" + (width_attribute) + (depth_attribute) + "/>\n" + "</imageobject>\n" + "<textobject><phrase>" + (node.$attr("alt")) + "</phrase></textobject>\n" + "</inlinemediaobject>";
      }, TMP_DocBook5Converter_inline_image_44.$$arity = 1);
      Opal.defn(self, '$inline_indexterm', TMP_DocBook5Converter_inline_indexterm_45 = function $$inline_indexterm(node) {
        var $a, self = this, terms = nil, result = nil, numterms = nil;

        if (node.$type()['$==']("visible")) {
          return "" + "<indexterm><primary>" + (node.$text()) + "</primary></indexterm>" + (node.$text())
          } else {
          
          terms = node.$attr("terms");
          result = [];
          if ((($a = $rb_gt((numterms = terms.$size()), 2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<indexterm>\n" + "<primary>" + (terms['$[]'](0)) + "</primary><secondary>" + (terms['$[]'](1)) + "</secondary><tertiary>" + (terms['$[]'](2)) + "</tertiary>\n" + "</indexterm>")};
          if ((($a = $rb_gt(numterms, 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<indexterm>\n" + "<primary>" + (terms['$[]'](-2)) + "</primary><secondary>" + (terms['$[]'](-1)) + "</secondary>\n" + "</indexterm>")};
          result['$<<']("" + "<indexterm>\n" + "<primary>" + (terms['$[]'](-1)) + "</primary>\n" + "</indexterm>");
          return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
        }
      }, TMP_DocBook5Converter_inline_indexterm_45.$$arity = 1);
      Opal.defn(self, '$inline_kbd', TMP_DocBook5Converter_inline_kbd_47 = function $$inline_kbd(node) {
        var TMP_46, self = this, keys = nil;

        if ((keys = node.$attr("keys")).$size()['$=='](1)) {
          return "" + "<keycap>" + (keys['$[]'](0)) + "</keycap>"
          } else {
          return "" + "<keycombo>" + ($send(keys, 'map', [], (TMP_46 = function(key){var self = TMP_46.$$s || this;
if (key == null) key = nil;
          return "" + "<keycap>" + (key) + "</keycap>"}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46)).$join()) + "</keycombo>"
        }
      }, TMP_DocBook5Converter_inline_kbd_47.$$arity = 1);
      Opal.defn(self, '$inline_menu', TMP_DocBook5Converter_inline_menu_49 = function $$inline_menu(node) {
        var $a, TMP_48, self = this, menu = nil, submenus = nil, submenu_path = nil, menuitem = nil;

        
        menu = node.$attr("menu");
        if ((($a = (submenus = node.$attr("submenus"))['$empty?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          submenu_path = $send(submenus, 'map', [], (TMP_48 = function(submenu){var self = TMP_48.$$s || this;
if (submenu == null) submenu = nil;
          return "" + "<guisubmenu>" + (submenu) + "</guisubmenu> "}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48)).$join().$chop();
          return "" + "<menuchoice><guimenu>" + (menu) + "</guimenu> " + (submenu_path) + " <guimenuitem>" + (node.$attr("menuitem")) + "</guimenuitem></menuchoice>";
        } else if ((($a = (menuitem = node.$attr("menuitem"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<menuchoice><guimenu>" + (menu) + "</guimenu> <guimenuitem>" + (menuitem) + "</guimenuitem></menuchoice>"
          } else {
          return "" + "<guimenu>" + (menu) + "</guimenu>"
        };
      }, TMP_DocBook5Converter_inline_menu_49.$$arity = 1);
      
      $writer = [[nil, nil, true]];
      $send(Opal.cdecl($scope, 'QUOTE_TAGS', $hash2(["emphasis", "strong", "monospaced", "superscript", "subscript", "double", "single", "mark"], {"emphasis": ["<emphasis>", "</emphasis>", true], "strong": ["<emphasis role=\"strong\">", "</emphasis>", true], "monospaced": ["<literal>", "</literal>", false], "superscript": ["<superscript>", "</superscript>", false], "subscript": ["<subscript>", "</subscript>", false], "double": ["&#8220;", "&#8221;", true], "single": ["&#8216;", "&#8217;", true], "mark": ["<emphasis role=\"marked\">", "</emphasis>", false]})), 'default=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defn(self, '$inline_quoted', TMP_DocBook5Converter_inline_quoted_50 = function $$inline_quoted(node) {
        var $a, $b, $c, $d, $e, self = this, type = nil, equation = nil, open = nil, close = nil, supports_phrase = nil, text = nil, role = nil, quoted_text = nil;

        if ((type = node.$type())['$==']("asciimath")) {
          if ((($a = ((($b = (($c = Opal.const_get([Opal.Object.$$scope], 'AsciiMath', true, false)) ? 'constant' : nil)) !== false && $b !== nil && $b != null) ? $b : (function() {if ((($d = (($e = self['asciimath_available'], $e != null && $e !== nil) ? 'instance-variable' : nil)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return self.asciimath_available
            } else {
            
            return (self.asciimath_available = Opal.const_get($scopes, 'Helpers', true, true).$require_library("asciimath", true, "warn"));
          }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + "<inlineequation>" + (Opal.const_get([Opal.Object.$$scope], 'AsciiMath', true, true).$parse(node.$text()).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))) + "</inlineequation>"
            } else {
            return "" + "<inlineequation><mathphrase><![CDATA[" + (node.$text()) + "]]></mathphrase></inlineequation>"
          }
        } else if (type['$==']("latexmath")) {
          return "" + "<inlineequation><alt><![CDATA[" + ((equation = node.$text())) + "]]></alt><mathphrase><![CDATA[" + (equation) + "]]></mathphrase></inlineequation>"
          } else {
          
          $b = Opal.const_get($scopes, 'QUOTE_TAGS', true, true)['$[]'](type), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), (supports_phrase = ($a[2] == null ? nil : $a[2])), $b;
          text = node.$text();
          if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (supports_phrase !== false && supports_phrase !== nil && supports_phrase != null) {
              quoted_text = "" + (open) + "<phrase role=\"" + (role) + "\">" + (text) + "</phrase>" + (close)
              } else {
              quoted_text = "" + (open.$chop()) + " role=\"" + (role) + "\">" + (text) + (close)
            }
            } else {
            quoted_text = "" + (open) + (text) + (close)
          };
          if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + "<anchor" + (self.$common_attributes(node.$id(), nil, text)) + "/>" + (quoted_text)
            } else {
            return quoted_text
          };
        }
      }, TMP_DocBook5Converter_inline_quoted_50.$$arity = 1);
      Opal.defn(self, '$author_element', TMP_DocBook5Converter_author_element_51 = function $$author_element(doc, index) {
        var $a, self = this, firstname_key = nil, middlename_key = nil, lastname_key = nil, email_key = nil, result = nil;

        if (index == null) {
          index = nil;
        }
        
        firstname_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "firstname_" + (index)
          } else {
          return "firstname"
        }; return nil; })();
        middlename_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "middlename_" + (index)
          } else {
          return "middlename"
        }; return nil; })();
        lastname_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "lastname_" + (index)
          } else {
          return "lastname"
        }; return nil; })();
        email_key = (function() {if (index !== false && index !== nil && index != null) {
          return "" + "email_" + (index)
          } else {
          return "email"
        }; return nil; })();
        result = [];
        result['$<<']("<author>");
        result['$<<']("<personname>");
        if ((($a = doc['$attr?'](firstname_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<firstname>" + (doc.$attr(firstname_key)) + "</firstname>")};
        if ((($a = doc['$attr?'](middlename_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<othername>" + (doc.$attr(middlename_key)) + "</othername>")};
        if ((($a = doc['$attr?'](lastname_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<surname>" + (doc.$attr(lastname_key)) + "</surname>")};
        result['$<<']("</personname>");
        if ((($a = doc['$attr?'](email_key)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<email>" + (doc.$attr(email_key)) + "</email>")};
        result['$<<']("</author>");
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_author_element_51.$$arity = -2);
      Opal.defn(self, '$common_attributes', TMP_DocBook5Converter_common_attributes_52 = function $$common_attributes(id, role, reftext) {
        var self = this, res = nil;

        if (role == null) {
          role = nil;
        }
        if (reftext == null) {
          reftext = nil;
        }
        
        res = (function() {if (id !== false && id !== nil && id != null) {
          return "" + " xml:id=\"" + (id) + "\""
          } else {
          return ""
        }; return nil; })();
        if (role !== false && role !== nil && role != null) {
          res = "" + (res) + " role=\"" + (role) + "\""};
        if (reftext !== false && reftext !== nil && reftext != null) {
          res = "" + (res) + " xreflabel=\"" + (reftext) + "\""};
        return res;
      }, TMP_DocBook5Converter_common_attributes_52.$$arity = -2);
      Opal.defn(self, '$doctype_declaration', TMP_DocBook5Converter_doctype_declaration_53 = function $$doctype_declaration(root_tag_name) {
        var self = this;

        return nil
      }, TMP_DocBook5Converter_doctype_declaration_53.$$arity = 1);
      Opal.defn(self, '$document_info_element', TMP_DocBook5Converter_document_info_element_55 = function $$document_info_element(doc, info_tag_prefix, use_info_tag_prefix) {
        var $a, $b, TMP_54, $c, self = this, result = nil, date = nil, authorcount = nil, head_docinfo = nil;

        if (use_info_tag_prefix == null) {
          use_info_tag_prefix = false;
        }
        
        if (use_info_tag_prefix !== false && use_info_tag_prefix !== nil && use_info_tag_prefix != null) {
          } else {
          info_tag_prefix = ""
        };
        result = [];
        result['$<<']("" + "<" + (info_tag_prefix) + "info>");
        if ((($a = doc.$notitle()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](self.$document_title_tags(doc.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true}))))
        };
        if ((($a = (date = (function() {if ((($b = doc['$attr?']("revdate")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          
          return doc.$attr("revdate");
          } else {
          
          if ((($b = doc['$attr?']("reproducible")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return nil
            } else {
            
            return doc.$attr("docdate");
          };
        }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("" + "<date>" + (date) + "</date>")};
        if ((($a = doc['$has_header?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          
          if ((($a = doc['$attr?']("author")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = $rb_lt((authorcount = doc.$attr("authorcount").$to_i()), 2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              
              result['$<<'](self.$author_element(doc));
              if ((($a = doc['$attr?']("authorinitials")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                result['$<<']("" + "<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>")};
              } else {
              
              result['$<<']("<authorgroup>");
              $send(authorcount, 'times', [], (TMP_54 = function(index){var self = TMP_54.$$s || this;
if (index == null) index = nil;
              return result['$<<'](self.$author_element(doc, $rb_plus(index, 1)))}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54));
              result['$<<']("</authorgroup>");
            }};
          if ((($a = ($b = doc['$attr?']("revdate"), $b !== false && $b !== nil && $b != null ?((($c = doc['$attr?']("revnumber")) !== false && $c !== nil && $c != null) ? $c : doc['$attr?']("revremark")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            
            result['$<<']("" + "<revhistory>\n" + "<revision>");
            if ((($a = doc['$attr?']("revnumber")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<revnumber>" + (doc.$attr("revnumber")) + "</revnumber>")};
            if ((($a = doc['$attr?']("revdate")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<date>" + (doc.$attr("revdate")) + "</date>")};
            if ((($a = doc['$attr?']("authorinitials")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>")};
            if ((($a = doc['$attr?']("revremark")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("" + "<revremark>" + (doc.$attr("revremark")) + "</revremark>")};
            result['$<<']("" + "</revision>\n" + "</revhistory>");};
          if ((($a = (head_docinfo = doc.$docinfo())['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            result['$<<'](head_docinfo)
          };
          if ((($a = doc['$attr?']("orgname")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<orgname>" + (doc.$attr("orgname")) + "</orgname>")};};
        result['$<<']("" + "</" + (info_tag_prefix) + "info>");
        if (doc.$doctype()['$==']("manpage")) {
          
          result['$<<']("<refmeta>");
          if ((($a = doc['$attr?']("mantitle")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<refentrytitle>" + (doc.$attr("mantitle")) + "</refentrytitle>")};
          if ((($a = doc['$attr?']("manvolnum")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<manvolnum>" + (doc.$attr("manvolnum")) + "</manvolnum>")};
          result['$<<']("</refmeta>");
          result['$<<']("<refnamediv>");
          if ((($a = doc['$attr?']("manname")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<refname>" + (doc.$attr("manname")) + "</refname>")};
          if ((($a = doc['$attr?']("manpurpose")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + "<refpurpose>" + (doc.$attr("manpurpose")) + "</refpurpose>")};
          result['$<<']("</refnamediv>");};
        return $rb_times(result, Opal.const_get($scopes, 'EOL', true, true));
      }, TMP_DocBook5Converter_document_info_element_55.$$arity = -3);
      Opal.defn(self, '$document_ns_attributes', TMP_DocBook5Converter_document_ns_attributes_56 = function $$document_ns_attributes(doc) {
        var self = this;

        return " xmlns=\"http://docbook.org/ns/docbook\" xmlns:xl=\"http://www.w3.org/1999/xlink\" version=\"5.0\""
      }, TMP_DocBook5Converter_document_ns_attributes_56.$$arity = 1);
      Opal.defn(self, '$lang_attribute_name', TMP_DocBook5Converter_lang_attribute_name_57 = function $$lang_attribute_name() {
        var self = this;

        return "xml:lang"
      }, TMP_DocBook5Converter_lang_attribute_name_57.$$arity = 0);
      Opal.defn(self, '$document_title_tags', TMP_DocBook5Converter_document_title_tags_58 = function $$document_title_tags(title) {
        var $a, self = this;

        if ((($a = title['$subtitle?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<title>" + (title.$main()) + "</title>\n" + "<subtitle>" + (title.$subtitle()) + "</subtitle>"
          } else {
          return "" + "<title>" + (title) + "</title>"
        }
      }, TMP_DocBook5Converter_document_title_tags_58.$$arity = 1);
      Opal.defn(self, '$resolve_content', TMP_DocBook5Converter_resolve_content_59 = function $$resolve_content(node) {
        var self = this;

        if (node.$content_model()['$==']("compound")) {
          return node.$content()
          } else {
          return "" + "<simpara>" + (node.$content()) + "</simpara>"
        }
      }, TMP_DocBook5Converter_resolve_content_59.$$arity = 1);
      return (Opal.defn(self, '$title_tag', TMP_DocBook5Converter_title_tag_60 = function $$title_tag(node, optional) {
        var $a, $b, self = this;

        if (optional == null) {
          optional = true;
        }
        if ((($a = ((($b = optional['$!']()) !== false && $b !== nil && $b != null) ? $b : node['$title?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + "<title>" + (node.$title()) + "</title>\n"
          } else {
          return nil
        }
      }, TMP_DocBook5Converter_title_tag_60.$$arity = -2), nil) && 'title_tag';
    })(Opal.const_get($scopes, 'Converter', true, true), Opal.const_get([Opal.const_get($scopes, 'Converter', true, true).$$scope], 'BuiltIn', true, true), $scopes)
  })($scope.base, $scopes)
})(Opal);


  return {};
}));
